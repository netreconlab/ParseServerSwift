@Tutorial(time: 5) {
    @Intro(title: "Cloud Code") {
        Adding routes for ParseHooks are as simple as adding [routes in Vapor](https://docs.vapor.codes/basics/routing/). `ParseServerSwift` adds some additional methods to routes to easily create and register [Hook Functions](https://parseplatform.org/Parse-Swift/release/documentation/parseswift/parsehookfunctionable) and [Hook Triggers](https://parseplatform.org/Parse-Swift/release/documentation/parseswift/parsehooktriggerable/). All routes should be added to [ParseServerSwift/Sources/ParseServerSwift/routes.swift](https://github.com/netreconlab/ParseServerSwift/blob/main/Sources/ParseServerSwift/routes.swift)
    }
    
    @Section(title: "Function Routes") {
        @Steps {
            
            @Step {
                Cloud Code Functions can also take parameters. It's recommended to place all paramters in 
                [ParseServerSwift/Sources/ParseServerSwift/Models/Parameters](https://github.com/netreconlab/ParseServerSwift/blob/main/Sources/ParseServerSwift/Models/Parameters)

                ```swift
                app.post("foo",
                         name: "foo") { req async throws -> ParseHookResponse<String> in
                    if let error: ParseHookResponse<String> = checkHeaders(req) {
                        return error
                    }
                    var parseRequest = try req.content
                        .decode(ParseHookFunctionRequest<User, FooParameters>.self)
                    
                    // If a User called the request, fetch the complete user.
                    if parseRequest.user != nil {
                        parseRequest = try await parseRequest.hydrateUser(request: req)
                    }
                    
                    // To query using the User's credentials who called this function,
                    // use the options() method from the request
                    let options = parseRequest.options()
                    let scores = try await GameScore.query.findAll(options: options)
                    req.logger.info("Scores this user can access: \(scores)")
                    return ParseHookResponse(success: "Hello, new world!")
                }
                ```
                
                @Code(name: "Example Parameters", file: FooParameters.swift)
            }

            @Step {
                ```swift
                // A Parse Hook Trigger route.
                app.post("bar",
                         className: "GameScore",
                         triggerName: .beforeSave) { req async throws -> ParseHookResponse<GameScore> in
                    if let error: ParseHookResponse<GameScore> = checkHeaders(req) {
                        return error
                    }
                    var parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    // If a User called the request, fetch the complete user.
                    if parseRequest.user != nil {
                        parseRequest = try await parseRequest.hydrateUser(request: req)
                    }

                    guard let object = parseRequest.object else {
                        return ParseHookResponse(error: .init(code: .missingObjectId,
                                                              message: "Object not sent in request."))
                    }
                    // To query using the primaryKey pass the `usePrimaryKey` option
                    // to ther query.
                    let scores = try await GameScore.query.findAll(options: [.usePrimaryKey])
                    req.logger.info("All scores: \(scores)")
                    return ParseHookResponse(success: object)
                }

                // A Parse Hook Trigger route.
                app.post("find",
                         className: "GameScore",
                         triggerName: .beforeFind) { req async throws -> ParseHookResponse<[GameScore]> in
                    if let error: ParseHookResponse<[GameScore]> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)
                    req.logger.info("A query is being made: \(parseRequest)")
                    let score1 = GameScore(objectId: "yolo",
                                           createdAt: Date(),
                                           points: 50)
                    let score2 = GameScore(objectId: "yolo",
                                           createdAt: Date(),
                                           points: 60)
                    return ParseHookResponse(success: [score1, score2])
                }

                // A Parse Hook Trigger route.
                app.post("login",
                         className: "_User",
                         triggerName: .afterLogin) { req async throws -> ParseHookResponse<Bool> in
                    if let error: ParseHookResponse<Bool> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    req.logger.info("A user has logged in: \(parseRequest)")
                    return ParseHookResponse(success: true)
                }

                // A Parse Hook Trigger route.
                app.post("file",
                         triggerName: .afterDelete) { req async throws -> ParseHookResponse<Bool> in
                    if let error: ParseHookResponse<Bool> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    req.logger.info("A ParseFile is being saved: \(parseRequest)")
                    return ParseHookResponse(success: true)
                }

                // A Parse Hook Trigger route.
                app.post("connect",
                         triggerName: .beforeConnect) { req async throws -> ParseHookResponse<Bool> in
                    if let error: ParseHookResponse<Bool> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    req.logger.info("A LiveQuery connection is being made: \(parseRequest)")
                    return ParseHookResponse(success: true)
                }

                // A Parse Hook Trigger route.
                app.post("subscribe",
                         className: "GameScore",
                         triggerName: .beforeSubscribe) { req async throws -> ParseHookResponse<Bool> in
                    if let error: ParseHookResponse<Bool> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    req.logger.info("A LiveQuery subscribe is being made: \(parseRequest)")
                    return ParseHookResponse(success: true)
                }

                // A Parse Hook Trigger route.
                app.post("event",
                         className: "GameScore",
                         triggerName: .afterEvent) { req async throws -> ParseHookResponse<Bool> in
                    if let error: ParseHookResponse<Bool> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    req.logger.info("A LiveQuery event occured: \(parseRequest)")
                    return ParseHookResponse(success: true)
                }
                ```
            }
        }
    }

    @Section(title: "Hook Routes") {
        @Steps {

            @Step {
                ```swift
                // A Parse Hook Trigger route.
                app.post("bar",
                         className: "GameScore",
                         triggerName: .beforeSave) { req async throws -> ParseHookResponse<GameScore> in
                    if let error: ParseHookResponse<GameScore> = checkHeaders(req) {
                        return error
                    }
                    var parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    // If a User called the request, fetch the complete user.
                    if parseRequest.user != nil {
                        parseRequest = try await parseRequest.hydrateUser(request: req)
                    }

                    guard let object = parseRequest.object else {
                        return ParseHookResponse(error: .init(code: .missingObjectId,
                                                              message: "Object not sent in request."))
                    }
                    // To query using the primaryKey pass the `usePrimaryKey` option
                    // to ther query.
                    let scores = try await GameScore.query.findAll(options: [.usePrimaryKey])
                    req.logger.info("All scores: \(scores)")
                    return ParseHookResponse(success: object)
                }
                ```
            }
            
            @Step {
                ```
                // A Parse Hook Trigger route.
                app.post("find",
                         className: "GameScore",
                         triggerName: .beforeFind) { req async throws -> ParseHookResponse<[GameScore]> in
                    if let error: ParseHookResponse<[GameScore]> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)
                    req.logger.info("A query is being made: \(parseRequest)")
                    let score1 = GameScore(objectId: "yolo",
                                           createdAt: Date(),
                                           points: 50)
                    let score2 = GameScore(objectId: "yolo",
                                           createdAt: Date(),
                                           points: 60)
                    return ParseHookResponse(success: [score1, score2])
                }
                ```
            }

            @Step {
                ```
                // A Parse Hook Trigger route.
                app.post("login",
                         className: "_User",
                         triggerName: .afterLogin) { req async throws -> ParseHookResponse<Bool> in
                    if let error: ParseHookResponse<Bool> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    req.logger.info("A user has logged in: \(parseRequest)")
                    return ParseHookResponse(success: true)
                }
                ```
            }
            
            @Step {
                ```
                // A Parse Hook Trigger route.
                app.post("file",
                         triggerName: .afterDelete) { req async throws -> ParseHookResponse<Bool> in
                    if let error: ParseHookResponse<Bool> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    req.logger.info("A ParseFile is being saved: \(parseRequest)")
                    return ParseHookResponse(success: true)
                }
                ```
            }

            @Step {
                ```
                // A Parse Hook Trigger route.
                app.post("connect",
                         triggerName: .beforeConnect) { req async throws -> ParseHookResponse<Bool> in
                    if let error: ParseHookResponse<Bool> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    req.logger.info("A LiveQuery connection is being made: \(parseRequest)")
                    return ParseHookResponse(success: true)
                }
                ```
            }

            @Step {
                ```
                // A Parse Hook Trigger route.
                app.post("subscribe",
                         className: "GameScore",
                         triggerName: .beforeSubscribe) { req async throws -> ParseHookResponse<Bool> in
                    if let error: ParseHookResponse<Bool> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    req.logger.info("A LiveQuery subscribe is being made: \(parseRequest)")
                    return ParseHookResponse(success: true)
                }
                ```
            }
            
            @Step {
                ```
                // A Parse Hook Trigger route.
                app.post("event",
                         className: "GameScore",
                         triggerName: .afterEvent) { req async throws -> ParseHookResponse<Bool> in
                    if let error: ParseHookResponse<Bool> = checkHeaders(req) {
                        return error
                    }
                    let parseRequest = try req.content
                        .decode(ParseHookTriggerRequest<User, GameScore>.self)

                    req.logger.info("A LiveQuery event occured: \(parseRequest)")
                    return ParseHookResponse(success: true)
                }
                ```
            }
        }
    }
}
