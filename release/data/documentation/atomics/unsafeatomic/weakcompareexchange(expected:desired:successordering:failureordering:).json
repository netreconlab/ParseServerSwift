{
  "abstract" : [
    {
      "text" : "Perform an atomic weak compare and exchange operation on the current",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "value, applying the specified success\/failure memory orderings. This",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "compare-exchange variant is allowed to spuriously fail; it is designed to",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "be called in a loop until it indicates a successful exchange has happened.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/UnsafeAtomic"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/UnsafeAtomic\/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "conformance" : {
      "availabilityPrefix" : [
        {
          "text" : "Available when",
          "type" : "text"
        }
      ],
      "conformancePrefix" : [
        {
          "text" : "Conforms when",
          "type" : "text"
        }
      ],
      "constraints" : [
        {
          "code" : "Value",
          "type" : "codeVoice"
        },
        {
          "text" : " conforms to ",
          "type" : "text"
        },
        {
          "code" : "AtomicValue",
          "type" : "codeVoice"
        },
        {
          "text" : " and ",
          "type" : "text"
        },
        {
          "code" : "Value",
          "type" : "codeVoice"
        },
        {
          "text" : " is ",
          "type" : "text"
        },
        {
          "code" : "Value.AtomicRepresentation.Value",
          "type" : "codeVoice"
        },
        {
          "text" : ".",
          "type" : "text"
        }
      ]
    },
    "extendedModule" : "Atomics",
    "externalID" : "s:7Atomics12UnsafeAtomicV19weakCompareExchange8expected7desired15successOrdering07failureJ0Sb9exchanged_x8originaltx_xnAA0c6UpdateJ0VAA0c4LoadJ0VtF",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "weakCompareExchange"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "expected"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7Atomics12UnsafeAtomicV5Valuexmfp",
        "text" : "Value"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "desired"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7Atomics12UnsafeAtomicV5Valuexmfp",
        "text" : "Value"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "successOrdering"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7Atomics20AtomicUpdateOrderingV",
        "text" : "AtomicUpdateOrdering"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "failureOrdering"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7Atomics18AtomicLoadOrderingV",
        "text" : "AtomicLoadOrdering"
      },
      {
        "kind" : "text",
        "text" : ") -> (exchanged"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sb",
        "text" : "Bool"
      },
      {
        "kind" : "text",
        "text" : ", original"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7Atomics12UnsafeAtomicV5Valuexmfp",
        "text" : "Value"
      },
      {
        "kind" : "text",
        "text" : ")"
      }
    ],
    "modules" : [
      {
        "name" : "Atomics"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "weakCompareExchange(expected:desired:successOrdering:failureOrdering:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "weakCompareExchange"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "expected"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7Atomics12UnsafeAtomicV5Valuexmfp",
              "text" : "Value"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "externalParam",
              "text" : "desired"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7Atomics12UnsafeAtomicV5Valuexmfp",
              "text" : "Value"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "externalParam",
              "text" : "successOrdering"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/AtomicUpdateOrdering",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7Atomics20AtomicUpdateOrderingV",
              "text" : "AtomicUpdateOrdering"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "externalParam",
              "text" : "failureOrdering"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/AtomicLoadOrdering",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7Atomics18AtomicLoadOrderingV",
              "text" : "AtomicLoadOrdering"
            },
            {
              "kind" : "text",
              "text" : ") -> (exchanged"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sb",
              "text" : "Bool"
            },
            {
              "kind" : "text",
              "text" : ", original"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7Atomics12UnsafeAtomicV5Valuexmfp",
              "text" : "Value"
            },
            {
              "kind" : "text",
              "text" : ")"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The expected current value.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "expected"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The desired new value.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "desired"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The memory ordering to apply if this",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "operation performs the exchange.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "successOrdering"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The memory ordering to apply on this",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "operation does not perform the exchange.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "failureOrdering"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A tuple ",
              "type" : "text"
            },
            {
              "code" : "(exchanged, original)",
              "type" : "codeVoice"
            },
            {
              "text" : ", where ",
              "type" : "text"
            },
            {
              "code" : "exchanged",
              "type" : "codeVoice"
            },
            {
              "text" : " is true if",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the exchange was successful, and ",
              "type" : "text"
            },
            {
              "code" : "original",
              "type" : "codeVoice"
            },
            {
              "text" : " is the original value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "This operation performs the following algorithm as a single atomic",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "transaction:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "atomic(self) { currentValue in",
            "  let original = currentValue",
            "  guard original == expected else { return (false, original) }",
            "  currentValue = desired",
            "  return (true, original)",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "(In this weak form, transient conditions may cause the ",
              "type" : "text"
            },
            {
              "code" : "original == expected",
              "type" : "codeVoice"
            },
            {
              "text" : " check to sometimes return false when the two values are in fact",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the same.)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "ordering",
              "type" : "codeVoice"
            },
            {
              "text" : " argument specifies the memory ordering to use when the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "operation manages to update the current value, while ",
              "type" : "text"
            },
            {
              "code" : "failureOrdering",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "will be used when the operation leaves the value intact.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/atomics\/unsafeatomic\/weakcompareexchange(expected:desired:successordering:failureordering:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Atomics": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Atomics",
  "type" : "topic",
  "url" : "\/documentation\/atomics"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Atomics/AtomicLoadOrdering": {
  "abstract" : [
    {
      "text" : "Specifies the memory ordering semantics of an atomic load operation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AtomicLoadOrdering"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/AtomicLoadOrdering",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AtomicLoadOrdering"
    }
  ],
  "role" : "symbol",
  "title" : "AtomicLoadOrdering",
  "type" : "topic",
  "url" : "\/documentation\/atomics\/atomicloadordering"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Atomics/AtomicUpdateOrdering": {
  "abstract" : [
    {
      "text" : "Specifies the memory ordering semantics of an atomic read-modify-write",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "operation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AtomicUpdateOrdering"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/AtomicUpdateOrdering",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AtomicUpdateOrdering"
    }
  ],
  "role" : "symbol",
  "title" : "AtomicUpdateOrdering",
  "type" : "topic",
  "url" : "\/documentation\/atomics\/atomicupdateordering"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Atomics/UnsafeAtomic": {
  "abstract" : [
    {
      "text" : "An unsafe reference type holding an atomic value, requiring manual memory",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "management of the underlying storage representation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "UnsafeAtomic"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/UnsafeAtomic",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "UnsafeAtomic"
    }
  ],
  "role" : "symbol",
  "title" : "UnsafeAtomic",
  "type" : "topic",
  "url" : "\/documentation\/atomics\/unsafeatomic"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Atomics/UnsafeAtomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)": {
  "abstract" : [
    {
      "text" : "Perform an atomic weak compare and exchange operation on the current",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "value, applying the specified success\/failure memory orderings. This",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "compare-exchange variant is allowed to spuriously fail; it is designed to",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "be called in a loop until it indicates a successful exchange has happened.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Value",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "AtomicValue",
        "type" : "codeVoice"
      },
      {
        "text" : " and ",
        "type" : "text"
      },
      {
        "code" : "Value",
        "type" : "codeVoice"
      },
      {
        "text" : " is ",
        "type" : "text"
      },
      {
        "code" : "Value.AtomicRepresentation.Value",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "weakCompareExchange"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "expected"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Atomics12UnsafeAtomicV5Valuexmfp",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "desired"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Atomics12UnsafeAtomicV5Valuexmfp",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "successOrdering"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Atomics20AtomicUpdateOrderingV",
      "text" : "AtomicUpdateOrdering"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "failureOrdering"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Atomics18AtomicLoadOrderingV",
      "text" : "AtomicLoadOrdering"
    },
    {
      "kind" : "text",
      "text" : ") -> (exchanged"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ", original"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Atomics12UnsafeAtomicV5Valuexmfp",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/UnsafeAtomic\/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "weakCompareExchange(expected:desired:successOrdering:failureOrdering:)",
  "type" : "topic",
  "url" : "\/documentation\/atomics\/unsafeatomic\/weakcompareexchange(expected:desired:successordering:failureordering:)"
}
}
}