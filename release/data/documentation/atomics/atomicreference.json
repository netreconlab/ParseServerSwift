{
  "abstract" : [
    {
      "text" : "A class type that supports atomic strong references.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/AtomicReference"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:7Atomics15AtomicReferenceP",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "protocol"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "AtomicReference"
      }
    ],
    "modules" : [
      {
        "name" : "Atomics"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "AtomicReference"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Protocol",
    "symbolKind" : "protocol",
    "title" : "AtomicReference"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "protocol"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "AtomicReference"
            },
            {
              "kind" : "text",
              "text" : " : AnyObject, "
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/AtomicOptionalWrappable",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7Atomics23AtomicOptionalWrappableP",
              "text" : "AtomicOptionalWrappable"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "code" : [
            "class MyObject: AtomicReference {}",
            "",
            "let object = MyObject()",
            "let ref = ManagedAtomic<MyObject>(object)",
            "",
            "ref.load(ordering: .relaxed) \/\/ Returns `object`."
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The conforming class is allowed to be non-final, but ",
              "type" : "text"
            },
            {
              "code" : "ManagedAtomic",
              "type" : "codeVoice"
            },
            {
              "text" : " and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "UnsafeAtomic",
              "type" : "codeVoice"
            },
            {
              "text" : " do not support using a subclass as their generic argument â€“",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the type of an atomic reference must be precisely the same class that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "originally conformed to the protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Derived: MyObject {}",
            "",
            "let ref2: ManagedAtomic<Derived>",
            "\/\/ error: 'ManagedAtomic' requires the types 'Derived' and 'Base' be equivalent"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that this limitation only affects the static type of the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "ManagedAtomic",
              "type" : "codeVoice"
            },
            {
              "text" : "\/",
              "type" : "text"
            },
            {
              "code" : "UnsafeAtomic",
              "type" : "codeVoice"
            },
            {
              "text" : " variables. Such references still fully",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "support holding instances of subclasses of the conforming class. (Returned",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "may be downcasted from the base type after an ",
              "type" : "text"
            },
            {
              "code" : "is",
              "type" : "codeVoice"
            },
            {
              "text" : " check.)",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let child = Derived()",
            "ref.store(child, ordering: .relaxed) \/\/ OK!",
            "let value = ref.load(ordering: .relaxed)",
            "\/\/ `value` is a variable of type `MyObject`, holding a `Derived` instance.",
            "print(value is Derived) \/\/ Prints \"true\""
          ],
          "syntax" : null,
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/AtomicOptionalWrappable",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/AtomicValue"
      ],
      "kind" : "relationships",
      "title" : "Inherits From",
      "type" : "inheritsFrom"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/atomics\/atomicreference"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Atomics": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Atomics",
  "type" : "topic",
  "url" : "\/documentation\/atomics"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Atomics/AtomicOptionalWrappable": {
  "abstract" : [
    {
      "text" : "An atomic value that also supports atomic operations when wrapped",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "in an ",
      "type" : "text"
    },
    {
      "code" : "Optional",
      "type" : "codeVoice"
    },
    {
      "text" : ". Atomic optional wrappable types come with a",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "standalone atomic representation for their optional-wrapped",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "variants.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AtomicOptionalWrappable"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/AtomicOptionalWrappable",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AtomicOptionalWrappable"
    }
  ],
  "role" : "symbol",
  "title" : "AtomicOptionalWrappable",
  "type" : "topic",
  "url" : "\/documentation\/atomics\/atomicoptionalwrappable"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Atomics/AtomicReference": {
  "abstract" : [
    {
      "text" : "A class type that supports atomic strong references.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AtomicReference"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/AtomicReference",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AtomicReference"
    }
  ],
  "role" : "symbol",
  "title" : "AtomicReference",
  "type" : "topic",
  "url" : "\/documentation\/atomics\/atomicreference"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Atomics/AtomicValue": {
  "abstract" : [
    {
      "text" : "A type that supports atomic operations through a separate atomic storage",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "representation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AtomicValue"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Atomics\/AtomicValue",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AtomicValue"
    }
  ],
  "role" : "symbol",
  "title" : "AtomicValue",
  "type" : "topic",
  "url" : "\/documentation\/atomics\/atomicvalue"
}
}
}