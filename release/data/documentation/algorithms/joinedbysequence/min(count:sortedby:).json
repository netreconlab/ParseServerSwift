{
  "abstract" : [
    {
      "text" : "Returns the smallest elements of this sequence, as sorted by the given",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "predicate.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/JoinedBySequence",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/JoinedBySequence\/Sequence-Implementations"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/JoinedBySequence\/min(count:sortedBy:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "Swift",
    "externalID" : "s:ST10AlgorithmsE3min5count8sortedBySay7ElementQzGSi_SbAF_AFtKXEtKF::SYNTHESIZED::s:10Algorithms16JoinedBySequenceV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "min"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "count"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Si",
        "text" : "Int"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "sortedBy"
      },
      {
        "kind" : "text",
        "text" : ": ("
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:ST7ElementQa",
        "text" : "Element"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:ST7ElementQa",
        "text" : "Element"
      },
      {
        "kind" : "text",
        "text" : ") "
      },
      {
        "kind" : "keyword",
        "text" : "throws"
      },
      {
        "kind" : "text",
        "text" : " -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sb",
        "text" : "Bool"
      },
      {
        "kind" : "text",
        "text" : ") "
      },
      {
        "kind" : "keyword",
        "text" : "rethrows"
      },
      {
        "kind" : "text",
        "text" : " -> ["
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:ST7ElementQa",
        "text" : "Element"
      },
      {
        "kind" : "text",
        "text" : "]"
      }
    ],
    "modules" : [
      {
        "name" : "Algorithms",
        "relatedModules" : [
          "Swift"
        ]
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "min(count:sortedBy:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "min"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "count"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Si",
              "text" : "Int"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "externalParam",
              "text" : "sortedBy"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "areInIncreasingOrder"
            },
            {
              "kind" : "text",
              "text" : ": ("
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:ST7ElementQa",
              "text" : "Element"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:ST7ElementQa",
              "text" : "Element"
            },
            {
              "kind" : "text",
              "text" : ") "
            },
            {
              "kind" : "keyword",
              "text" : "throws"
            },
            {
              "kind" : "text",
              "text" : " -> "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sb",
              "text" : "Bool"
            },
            {
              "kind" : "text",
              "text" : ") "
            },
            {
              "kind" : "keyword",
              "text" : "rethrows"
            },
            {
              "kind" : "text",
              "text" : " -> ["
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:ST7ElementQa",
              "text" : "Element"
            },
            {
              "kind" : "text",
              "text" : "]"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The number of elements to return. If ",
                  "type" : "text"
                },
                {
                  "code" : "count",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is greater than",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the number of elements in this sequence, all of the sequenceâ€™s",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "elements are returned.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "count"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "A predicate that returns ",
                  "type" : "text"
                },
                {
                  "code" : "true",
                  "type" : "codeVoice"
                },
                {
                  "text" : " if its",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "first argument should be ordered before its second argument;",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "otherwise, ",
                  "type" : "text"
                },
                {
                  "code" : "false",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "areInIncreasingOrder"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "An array of the smallest ",
              "type" : "text"
            },
            {
              "code" : "count",
              "type" : "codeVoice"
            },
            {
              "text" : " elements of this sequence,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "sorted according to ",
              "type" : "text"
            },
            {
              "code" : "areInIncreasingOrder",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example partially sorts an array of integers to retrieve its three",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "smallest values:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let numbers = [7, 1, 6, 2, 8, 3, 9]",
            "let smallestThree = numbers.min(count: 3, sortedBy: <)",
            "\/\/ [1, 2, 3]"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you need to sort a sequence but only need to access its smallest",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "elements, using this method can give you a performance boost over sorting",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the entire sequence. The order of equal elements is guaranteed to be",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "preserved.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "O(",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "k",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " log ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "k",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " + ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "nk",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : "), where ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "n",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " is the length of the",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "sequence and ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "k",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " is ",
                  "type" : "text"
                },
                {
                  "code" : "count",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Complexity",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/algorithms\/joinedbysequence\/min(count:sortedby:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Algorithms": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Algorithms",
  "type" : "topic",
  "url" : "\/documentation\/algorithms"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Algorithms/JoinedBySequence": {
  "abstract" : [
    {
      "text" : "A sequence that presents the elements of a base sequence of sequences",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "concatenated using a given separator.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "JoinedBySequence"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/JoinedBySequence",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "JoinedBySequence"
    }
  ],
  "role" : "symbol",
  "title" : "JoinedBySequence",
  "type" : "topic",
  "url" : "\/documentation\/algorithms\/joinedbysequence"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Algorithms/JoinedBySequence/Sequence-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/JoinedBySequence\/Sequence-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Sequence Implementations",
  "type" : "topic",
  "url" : "\/documentation\/algorithms\/joinedbysequence\/sequence-implementations"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Algorithms/JoinedBySequence/min(count:sortedBy:)": {
  "abstract" : [
    {
      "text" : "Returns the smallest elements of this sequence, as sorted by the given",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "predicate.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "min"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "count"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "sortedBy"
    },
    {
      "kind" : "text",
      "text" : ": ("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:ST7ElementQa",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:ST7ElementQa",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "rethrows"
    },
    {
      "kind" : "text",
      "text" : " -> ["
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:ST7ElementQa",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : "]"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/JoinedBySequence\/min(count:sortedBy:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "min(count:sortedBy:)",
  "type" : "topic",
  "url" : "\/documentation\/algorithms\/joinedbysequence\/min(count:sortedby:)"
}
}
}