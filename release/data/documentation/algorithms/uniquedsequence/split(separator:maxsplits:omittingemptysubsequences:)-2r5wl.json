{
  "abstract" : [
    {
      "text" : "Lazily returns the longest possible subsequences of the sequence, in",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "order, around elements equal to the given element.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/UniquedSequence",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/UniquedSequence\/LazySequenceProtocol-Implementations"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/UniquedSequence\/split(separator:maxSplits:omittingEmptySubsequences:)-2r5wl"
  },
  "kind" : "symbol",
  "metadata" : {
    "conformance" : {
      "availabilityPrefix" : [
        {
          "text" : "Available when",
          "type" : "text"
        }
      ],
      "conformancePrefix" : [
        {
          "text" : "Conforms when",
          "type" : "text"
        }
      ],
      "constraints" : [
        {
          "code" : "Element",
          "type" : "codeVoice"
        },
        {
          "text" : " conforms to ",
          "type" : "text"
        },
        {
          "code" : "Equatable",
          "type" : "codeVoice"
        },
        {
          "text" : ".",
          "type" : "text"
        }
      ]
    },
    "extendedModule" : "Swift",
    "externalID" : "s:s20LazySequenceProtocolP10AlgorithmsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC05SplitB0Vy8ElementsQzGAE_SiSbtF::SYNTHESIZED::s:10Algorithms15UniquedSequenceV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "split"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "separator"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:ST7ElementQa",
        "text" : "Element"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "maxSplits"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Si",
        "text" : "Int"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "omittingEmptySubsequences"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sb",
        "text" : "Bool"
      },
      {
        "kind" : "text",
        "text" : ") -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:10Algorithms13SplitSequenceV",
        "text" : "SplitSequence"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:s20LazySequenceProtocolP8ElementsQa",
        "text" : "Elements"
      },
      {
        "kind" : "text",
        "text" : ">"
      }
    ],
    "modules" : [
      {
        "name" : "Algorithms",
        "relatedModules" : [
          "Swift"
        ]
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "split(separator:maxSplits:omittingEmptySubsequences:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "split"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "separator"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:ST7ElementQa",
              "text" : "Element"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "externalParam",
              "text" : "maxSplits"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Si",
              "text" : "Int"
            },
            {
              "kind" : "text",
              "text" : " = Int.max, "
            },
            {
              "kind" : "externalParam",
              "text" : "omittingEmptySubsequences"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sb",
              "text" : "Bool"
            },
            {
              "kind" : "text",
              "text" : " = true) -> "
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/SplitSequence",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:10Algorithms13SplitSequenceV",
              "text" : "SplitSequence"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:s20LazySequenceProtocolP8ElementsQa",
              "text" : "Elements"
            },
            {
              "kind" : "text",
              "text" : ">"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The element that should be split upon.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "separator"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The maximum number of times to split the sequence, or",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "one less than the number of subsequences to return. If",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "maxSplits + 1",
                  "type" : "codeVoice"
                },
                {
                  "text" : " subsequences are returned, the last one is a suffix",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "of the original sequence containing the remaining elements.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "maxSplits",
                  "type" : "codeVoice"
                },
                {
                  "text" : " must be greater than or equal to zero. The default value",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "is ",
                  "type" : "text"
                },
                {
                  "code" : "Int.max",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "maxSplits"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If ",
                  "type" : "text"
                },
                {
                  "code" : "false",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", an empty subsequence is",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "returned in the result for each consecutive pair of ",
                  "type" : "text"
                },
                {
                  "code" : "separator",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "elements in the sequence and for each instance of ",
                  "type" : "text"
                },
                {
                  "code" : "separator",
                  "type" : "codeVoice"
                },
                {
                  "text" : " at",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the start or end of the sequence. If ",
                  "type" : "text"
                },
                {
                  "code" : "true",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", only nonempty",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "subsequences are returned. The default value is ",
                  "type" : "text"
                },
                {
                  "code" : "true",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "omittingEmptySubsequences"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A lazy sequence of subsequences, split from this sequence’s",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "elements.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The resulting lazy sequence consists of at most ",
              "type" : "text"
            },
            {
              "code" : "maxSplits + 1",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "subsequences. Elements that are used to split the sequence are not",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "returned as part of any subsequence (except possibly the last one, in the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "case where ",
              "type" : "text"
            },
            {
              "code" : "maxSplits",
              "type" : "codeVoice"
            },
            {
              "text" : " is less than the number of separators in the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "sequence).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following examples show the effects of the ",
              "type" : "text"
            },
            {
              "code" : "maxSplits",
              "type" : "codeVoice"
            },
            {
              "text" : " and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "omittingEmptySubsequences",
              "type" : "codeVoice"
            },
            {
              "text" : " parameters when splitting a sequence of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "integers at each zero (",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : "). The first use of ",
              "type" : "text"
            },
            {
              "code" : "split",
              "type" : "codeVoice"
            },
            {
              "text" : " returns each",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "subsequence that was originally separated by one or more zeros.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let numbers = AnySequence([1, 2, 0, 3, 4, 0, 0, 5])",
            "for subsequence in numbers.lazy.split(separator: 0) {",
            "  print(subsequence)",
            "}",
            "\/* Prints:",
            "[1, 2]",
            "[3, 4]",
            "[5]",
            "*\/"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The second example passes ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : " for the ",
              "type" : "text"
            },
            {
              "code" : "maxSplits",
              "type" : "codeVoice"
            },
            {
              "text" : " parameter, so the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "original sequence is split just once, into two subsequences.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for subsequence in numbers.lazy.split(",
            "    separator: 0,",
            "    maxSplits: 1",
            ") {",
            "  print(subsequence)",
            "}",
            "\/* Prints:",
            "[1, 2]",
            "[3, 4, 0, 0, 5]",
            "*\/"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The final example passes ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " for the ",
              "type" : "text"
            },
            {
              "code" : "omittingEmptySubsequences",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "parameter, so the sequence of returned subsequences contains empty",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "subsequences where zeros were repeated.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "for subsequence in numbers.lazy.split(",
            "    separator: 0,",
            "    omittingEmptySubsequences: false",
            ") {",
            "  print(subsequence)",
            "}",
            "\/* Prints:",
            "[1, 2]",
            "[3, 4]",
            "[]",
            "[5]",
            "*\/"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "O(",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "n",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : "), where ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "n",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " is the length of the sequence.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Complexity",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/algorithms\/uniquedsequence\/split(separator:maxsplits:omittingemptysubsequences:)-2r5wl"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Algorithms": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Algorithms",
  "type" : "topic",
  "url" : "\/documentation\/algorithms"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Algorithms/SplitSequence": {
  "abstract" : [
    {
      "text" : "A sequence that lazily splits a base sequence into subsequences separated by",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "elements that satisfy the given ",
      "type" : "text"
    },
    {
      "code" : "whereSeparator",
      "type" : "codeVoice"
    },
    {
      "text" : " predicate.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "SplitSequence"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/SplitSequence",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "SplitSequence"
    }
  ],
  "role" : "symbol",
  "title" : "SplitSequence",
  "type" : "topic",
  "url" : "\/documentation\/algorithms\/splitsequence"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Algorithms/UniquedSequence": {
  "abstract" : [
    {
      "text" : "A sequence wrapper that leaves out duplicate elements of a base sequence.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "UniquedSequence"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/UniquedSequence",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "UniquedSequence"
    }
  ],
  "role" : "symbol",
  "title" : "UniquedSequence",
  "type" : "topic",
  "url" : "\/documentation\/algorithms\/uniquedsequence"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Algorithms/UniquedSequence/LazySequenceProtocol-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/UniquedSequence\/LazySequenceProtocol-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "LazySequenceProtocol Implementations",
  "type" : "topic",
  "url" : "\/documentation\/algorithms\/uniquedsequence\/lazysequenceprotocol-implementations"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Algorithms/UniquedSequence/split(separator:maxSplits:omittingEmptySubsequences:)-2r5wl": {
  "abstract" : [
    {
      "text" : "Lazily returns the longest possible subsequences of the sequence, in",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "order, around elements equal to the given element.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Element",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Equatable",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "split"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "separator"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:ST7ElementQa",
      "text" : "Element"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "maxSplits"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "omittingEmptySubsequences"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10Algorithms13SplitSequenceV",
      "text" : "SplitSequence"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s20LazySequenceProtocolP8ElementsQa",
      "text" : "Elements"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Algorithms\/UniquedSequence\/split(separator:maxSplits:omittingEmptySubsequences:)-2r5wl",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "split(separator:maxSplits:omittingEmptySubsequences:)",
  "type" : "topic",
  "url" : "\/documentation\/algorithms\/uniquedsequence\/split(separator:maxsplits:omittingemptysubsequences:)-2r5wl"
}
}
}