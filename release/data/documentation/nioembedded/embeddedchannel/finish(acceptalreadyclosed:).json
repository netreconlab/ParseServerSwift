{
  "abstract" : [
    {
      "text" : "Synchronously closes the ",
      "type" : "text"
    },
    {
      "code" : "EmbeddedChannel",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOEmbedded\/EmbeddedChannel"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish(acceptAlreadyClosed:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:11NIOEmbedded15EmbeddedChannelC6finish19acceptAlreadyClosedAC13LeftOverStateOSb_tKF",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "finish"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "acceptAlreadyClosed"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sb",
        "text" : "Bool"
      },
      {
        "kind" : "text",
        "text" : ") "
      },
      {
        "kind" : "keyword",
        "text" : "throws"
      },
      {
        "kind" : "text",
        "text" : " -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:11NIOEmbedded15EmbeddedChannelC",
        "text" : "EmbeddedChannel"
      },
      {
        "kind" : "text",
        "text" : "."
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO",
        "text" : "LeftOverState"
      }
    ],
    "modules" : [
      {
        "name" : "NIO"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "finish(acceptAlreadyClosed:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "finish"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "acceptAlreadyClosed"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sb",
              "text" : "Bool"
            },
            {
              "kind" : "text",
              "text" : ") "
            },
            {
              "kind" : "keyword",
              "text" : "throws"
            },
            {
              "kind" : "text",
              "text" : " -> "
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOEmbedded\/EmbeddedChannel",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:11NIOEmbedded15EmbeddedChannelC",
              "text" : "EmbeddedChannel"
            },
            {
              "kind" : "text",
              "text" : "."
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO",
              "text" : "LeftOverState"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Whether ",
                  "type" : "text"
                },
                {
                  "code" : "finish",
                  "type" : "codeVoice"
                },
                {
                  "text" : " should throw if the ",
                  "type" : "text"
                },
                {
                  "code" : "EmbeddedChannel",
                  "type" : "codeVoice"
                },
                {
                  "text" : " has been previously ",
                  "type" : "text"
                },
                {
                  "code" : "close",
                  "type" : "codeVoice"
                },
                {
                  "text" : "d.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "acceptAlreadyClosed"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "LeftOverState",
              "type" : "codeVoice"
            },
            {
              "text" : " of the ",
              "type" : "text"
            },
            {
              "code" : "EmbeddedChannel",
              "type" : "codeVoice"
            },
            {
              "text" : ". If all the inbound and outbound events have been",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "consumed (using ",
              "type" : "text"
            },
            {
              "code" : "readInbound",
              "type" : "codeVoice"
            },
            {
              "text" : " \/ ",
              "type" : "text"
            },
            {
              "code" : "readOutbound",
              "type" : "codeVoice"
            },
            {
              "text" : ") and there are no pending outbound events (unflushed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "writes) this will be ",
              "type" : "text"
            },
            {
              "code" : ".clean",
              "type" : "codeVoice"
            },
            {
              "text" : ". If there are any unconsumed inbound, outbound, or pending outbound",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "events, the ",
              "type" : "text"
            },
            {
              "code" : "EmbeddedChannel",
              "type" : "codeVoice"
            },
            {
              "text" : " will returns those as ",
              "type" : "text"
            },
            {
              "code" : ".leftOvers(inbound:outbound:pendingOutbound:)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Errors in the ",
              "type" : "text"
            },
            {
              "code" : "EmbeddedChannel",
              "type" : "codeVoice"
            },
            {
              "text" : " can be consumed using ",
              "type" : "text"
            },
            {
              "code" : "throwIfErrorCaught",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/nioembedded\/embeddedchannel\/finish(acceptalreadyclosed:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "NIO",
  "type" : "topic",
  "url" : "\/documentation\/nio"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOEmbedded/EmbeddedChannel": {
  "abstract" : [
    {
      "code" : "EmbeddedChannel",
      "type" : "codeVoice"
    },
    {
      "text" : " is a ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : " implementation that does neither any",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "actual IO nor has a proper eventing mechanism. The prime use-case for",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "EmbeddedChannel",
      "type" : "codeVoice"
    },
    {
      "text" : " is in unit tests when you want to feed the inbound events",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and check the outbound events manually.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "EmbeddedChannel"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOEmbedded\/EmbeddedChannel",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "EmbeddedChannel"
    }
  ],
  "role" : "symbol",
  "title" : "EmbeddedChannel",
  "type" : "topic",
  "url" : "\/documentation\/nioembedded\/embeddedchannel"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOEmbedded/EmbeddedChannel/LeftOverState": {
  "abstract" : [
    {
      "code" : "LeftOverState",
      "type" : "codeVoice"
    },
    {
      "text" : " represents any left-over inbound, outbound, and pending outbound events that hit the",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "EmbeddedChannel",
      "type" : "codeVoice"
    },
    {
      "text" : " and were not consumed when ",
      "type" : "text"
    },
    {
      "code" : "finish",
      "type" : "codeVoice"
    },
    {
      "text" : " was called on the ",
      "type" : "text"
    },
    {
      "code" : "EmbeddedChannel",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "LeftOverState"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "LeftOverState"
    }
  ],
  "role" : "symbol",
  "title" : "EmbeddedChannel.LeftOverState",
  "type" : "topic",
  "url" : "\/documentation\/nioembedded\/embeddedchannel\/leftoverstate"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOEmbedded/EmbeddedChannel/finish(acceptAlreadyClosed:)": {
  "abstract" : [
    {
      "text" : "Synchronously closes the ",
      "type" : "text"
    },
    {
      "code" : "EmbeddedChannel",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "finish"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "acceptAlreadyClosed"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11NIOEmbedded15EmbeddedChannelC",
      "text" : "EmbeddedChannel"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO",
      "text" : "LeftOverState"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish(acceptAlreadyClosed:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "finish(acceptAlreadyClosed:)",
  "type" : "topic",
  "url" : "\/documentation\/nioembedded\/embeddedchannel\/finish(acceptalreadyclosed:)"
}
}
}