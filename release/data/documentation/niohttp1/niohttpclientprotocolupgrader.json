{
  "abstract" : [
    {
      "text" : "An object that implements ",
      "type" : "text"
    },
    {
      "code" : "NIOHTTPClientProtocolUpgrader",
      "type" : "codeVoice"
    },
    {
      "text" : " knows how to handle HTTP upgrade to",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "a protocol on a client-side channel.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "It has the option of denying this upgrade based upon the server response.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:8NIOHTTP129NIOHTTPClientProtocolUpgraderP",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "protocol"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "NIOHTTPClientProtocolUpgrader"
      }
    ],
    "modules" : [
      {
        "name" : "NIOHTTP1"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "NIOHTTPClientProtocolUpgrader"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Protocol",
    "symbolKind" : "protocol",
    "title" : "NIOHTTPClientProtocolUpgrader"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "protocol"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "NIOHTTPClientProtocolUpgrader"
            }
          ]
        }
      ],
      "kind" : "declarations"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOWebSocket\/NIOWebSocketClientUpgrader"
      ],
      "kind" : "relationships",
      "title" : "Conforming Types",
      "type" : "conformingTypes"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/requiredUpgradeHeaders",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/supportedProtocol"
      ],
      "title" : "Instance Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/addCustom(upgradeRequestHeaders:)",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/shouldAllowUpgrade(upgradeResponse:)",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/upgrade(context:upgradeResponse:)"
      ],
      "title" : "Instance Methods"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/niohttp1\/niohttpclientprotocolupgrader"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "NIOHTTP1",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader": {
  "abstract" : [
    {
      "text" : "An object that implements ",
      "type" : "text"
    },
    {
      "code" : "NIOHTTPClientProtocolUpgrader",
      "type" : "codeVoice"
    },
    {
      "text" : " knows how to handle HTTP upgrade to",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "a protocol on a client-side channel.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "It has the option of denying this upgrade based upon the server response.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOHTTPClientProtocolUpgrader"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOHTTPClientProtocolUpgrader"
    }
  ],
  "role" : "symbol",
  "title" : "NIOHTTPClientProtocolUpgrader",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/niohttpclientprotocolupgrader"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader/addCustom(upgradeRequestHeaders:)": {
  "abstract" : [
    {
      "text" : "Additional headers to be added to the request, beyond the “Upgrade” and “Connection” headers.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "addCustom"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "upgradeRequestHeaders"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "keyword",
      "text" : "inout"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8NIOHTTP111HTTPHeadersV",
      "text" : "HTTPHeaders"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/addCustom(upgradeRequestHeaders:)",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "addCustom(upgradeRequestHeaders:)",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/addcustom(upgraderequestheaders:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader/requiredUpgradeHeaders": {
  "abstract" : [
    {
      "text" : "All the header fields the protocol requires in the request to successfully upgrade.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "These header fields will be added to the outbound request’s “Connection” header field.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "It is the responsibility of the custom headers call to actually add these required headers.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "requiredUpgradeHeaders"
    },
    {
      "kind" : "text",
      "text" : ": ["
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : "]"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/requiredUpgradeHeaders",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "requiredUpgradeHeaders",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/requiredupgradeheaders"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader/shouldAllowUpgrade(upgradeResponse:)": {
  "abstract" : [
    {
      "text" : "Gives the receiving upgrader the chance to deny the upgrade based on the upgrade HTTP response.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "shouldAllowUpgrade"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "upgradeResponse"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8NIOHTTP116HTTPResponseHeadV",
      "text" : "HTTPResponseHead"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/shouldAllowUpgrade(upgradeResponse:)",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "shouldAllowUpgrade(upgradeResponse:)",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/shouldallowupgrade(upgraderesponse:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader/supportedProtocol": {
  "abstract" : [
    {
      "text" : "The protocol this upgrader knows how to support.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "supportedProtocol"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/supportedProtocol",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "supportedProtocol",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/supportedprotocol"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/NIOHTTPClientProtocolUpgrader/upgrade(context:upgradeResponse:)": {
  "abstract" : [
    {
      "text" : "Called when the upgrade response has been flushed. At this time it is safe to mutate the channel",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "pipeline to add whatever channel handlers are required.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Until the returned ",
      "type" : "text"
    },
    {
      "code" : "EventLoopFuture",
      "type" : "codeVoice"
    },
    {
      "text" : " succeeds, all received data will be buffered.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "upgrade"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "context"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7NIOCore21ChannelHandlerContextC",
      "text" : "ChannelHandlerContext"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "upgradeResponse"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8NIOHTTP116HTTPResponseHeadV",
      "text" : "HTTPResponseHead"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7NIOCore15EventLoopFutureC",
      "text" : "EventLoopFuture"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s4Voida",
      "text" : "Void"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientProtocolUpgrader\/upgrade(context:upgradeResponse:)",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "upgrade(context:upgradeResponse:)",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/niohttpclientprotocolupgrader\/upgrade(context:upgraderesponse:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOWebSocket/NIOWebSocketClientUpgrader": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "HTTPClientProtocolUpgrader",
      "type" : "codeVoice"
    },
    {
      "text" : " that knows how to do the WebSocket upgrade dance.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOWebSocketClientUpgrader"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOWebSocket\/NIOWebSocketClientUpgrader",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOWebSocketClientUpgrader"
    }
  ],
  "role" : "symbol",
  "title" : "NIOWebSocketClientUpgrader",
  "type" : "topic",
  "url" : "\/documentation\/niowebsocket\/niowebsocketclientupgrader"
}
}
}