{
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "NIOCore",
    "externalID" : "s:7NIOCore14ChannelOptionsV5TypesO",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "enum"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "Types"
      }
    ],
    "modules" : [
      {
        "name" : "NIO",
        "relatedModules" : [
          "NIOCore"
        ]
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "Types"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Enumeration",
    "symbolKind" : "enum",
    "title" : "ChannelOptions.Types"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "enum"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "Types"
            }
          ]
        }
      ],
      "kind" : "declarations"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/AllocatorOption",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/AllowRemoteHalfClosureOption",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/AutoReadOption",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/BacklogOption",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/ConnectTimeoutOption",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/DatagramReceiveOffload",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/DatagramSegmentSize",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/DatagramVectorReadMessageCountOption",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/ExplicitCongestionNotificationsOption",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/LocalVsockContextID",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/MaxMessagesPerReadOption",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/ReceivePacketInfo",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/RecvAllocatorOption",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/SocketOption",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/WriteBufferWaterMark",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/WriteBufferWaterMarkOption",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/WriteSpinOption"
      ],
      "title" : "Structures"
    },
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/ConvenienceOptionValue"
      ],
      "title" : "Enumerations"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/nio\/channeloptions\/types"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "NIO",
  "type" : "topic",
  "url" : "\/documentation\/nio"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions": {
  "abstract" : [
    {
      "text" : "Provides ",
      "type" : "text"
    },
    {
      "code" : "ChannelOption",
      "type" : "codeVoice"
    },
    {
      "text" : "s to be used with a ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : ", ",
      "type" : "text"
    },
    {
      "code" : "Bootstrap",
      "type" : "codeVoice"
    },
    {
      "text" : " or ",
      "type" : "text"
    },
    {
      "code" : "ServerBootstrap",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ChannelOptions"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ChannelOptions"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Types"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Types"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/AllocatorOption": {
  "abstract" : [
    {
      "code" : "AllocatorOption",
      "type" : "codeVoice"
    },
    {
      "text" : " allows to specify the ",
      "type" : "text"
    },
    {
      "code" : "ByteBufferAllocator",
      "type" : "codeVoice"
    },
    {
      "text" : " to use.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AllocatorOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/AllocatorOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AllocatorOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.AllocatorOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/allocatoroption"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/AllowRemoteHalfClosureOption": {
  "abstract" : [
    {
      "code" : "AllowRemoteHalfClosureOption",
      "type" : "codeVoice"
    },
    {
      "text" : " allows users to configure whether the ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : " will close itself when its remote",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "peer shuts down its send stream, or whether it will remain open. If set to ",
      "type" : "text"
    },
    {
      "code" : "false",
      "type" : "codeVoice"
    },
    {
      "text" : " (the default), the ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "will be closed automatically if the remote peer shuts down its send stream. If set to true, the ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : " will",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "not be closed: instead, a ",
      "type" : "text"
    },
    {
      "code" : "ChannelEvent.inboundClosed",
      "type" : "codeVoice"
    },
    {
      "text" : " user event will be sent on the ",
      "type" : "text"
    },
    {
      "code" : "ChannelPipeline",
      "type" : "codeVoice"
    },
    {
      "text" : ",",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and no more data will be received.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AllowRemoteHalfClosureOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/AllowRemoteHalfClosureOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AllowRemoteHalfClosureOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.AllowRemoteHalfClosureOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/allowremotehalfclosureoption"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/AutoReadOption": {
  "abstract" : [
    {
      "code" : "AutoReadOption",
      "type" : "codeVoice"
    },
    {
      "text" : " allows users to configure if a ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : " should automatically call ",
      "type" : "text"
    },
    {
      "code" : "Channel.read",
      "type" : "codeVoice"
    },
    {
      "text" : " again once all data was read from the transport or",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "if the user is responsible to call ",
      "type" : "text"
    },
    {
      "code" : "Channel.read",
      "type" : "codeVoice"
    },
    {
      "text" : " manually.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AutoReadOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/AutoReadOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AutoReadOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.AutoReadOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/autoreadoption"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/BacklogOption": {
  "abstract" : [
    {
      "code" : "BacklogOption",
      "type" : "codeVoice"
    },
    {
      "text" : " allows users to configure the ",
      "type" : "text"
    },
    {
      "code" : "backlog",
      "type" : "codeVoice"
    },
    {
      "text" : " value as specified in ",
      "type" : "text"
    },
    {
      "code" : "man 2 listen",
      "type" : "codeVoice"
    },
    {
      "text" : ". This is only useful for ",
      "type" : "text"
    },
    {
      "code" : "ServerSocketChannel",
      "type" : "codeVoice"
    },
    {
      "text" : "s.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BacklogOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/BacklogOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "BacklogOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.BacklogOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/backlogoption"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/ConnectTimeoutOption": {
  "abstract" : [
    {
      "code" : "ConnectTimeoutOption",
      "type" : "codeVoice"
    },
    {
      "text" : " allows users to configure the ",
      "type" : "text"
    },
    {
      "code" : "TimeAmount",
      "type" : "codeVoice"
    },
    {
      "text" : " after which a connect will fail if it was not established in the meantime. May be",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "nil",
      "type" : "codeVoice"
    },
    {
      "text" : ", in which case the connection attempt will never time out.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ConnectTimeoutOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/ConnectTimeoutOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ConnectTimeoutOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.ConnectTimeoutOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/connecttimeoutoption"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/ConvenienceOptionValue": {
  "abstract" : [
    {
      "text" : "Has an option been set?",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Option has a value of generic type ValueType.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ConvenienceOptionValue"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/ConvenienceOptionValue",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ConvenienceOptionValue"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.ConvenienceOptionValue",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/convenienceoptionvalue"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/DatagramReceiveOffload": {
  "abstract" : [
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/DatagramReceiveOffload",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " sets the ",
      "type" : "text"
    },
    {
      "code" : "UDP_GRO",
      "type" : "codeVoice"
    },
    {
      "text" : " socket option which allows for datagrams to be accumulated",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "by the kernel (or in some cases, the NIC) and reduces traversals in the kernel’s networking layer.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "DatagramReceiveOffload"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/DatagramReceiveOffload",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "DatagramReceiveOffload"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.DatagramReceiveOffload",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/datagramreceiveoffload"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/DatagramSegmentSize": {
  "abstract" : [
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/DatagramSegmentSize",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " controls the ",
      "type" : "text"
    },
    {
      "code" : "UDP_SEGMENT",
      "type" : "codeVoice"
    },
    {
      "text" : " socket option (sometimes reffered to as ‘GSO’) which allows for",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "large writes to be sent via ",
      "type" : "text"
    },
    {
      "code" : "sendmsg",
      "type" : "codeVoice"
    },
    {
      "text" : " and ",
      "type" : "text"
    },
    {
      "code" : "sendmmsg",
      "type" : "codeVoice"
    },
    {
      "text" : " and segmented into separate datagrams by the kernel (or in some cases, the NIC).",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "The size of segments the large write is split into is controlled by the value of this option (note that writes do not need to be a",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "multiple of this option).",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "DatagramSegmentSize"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/DatagramSegmentSize",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "DatagramSegmentSize"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.DatagramSegmentSize",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/datagramsegmentsize"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/DatagramVectorReadMessageCountOption": {
  "abstract" : [
    {
      "code" : "DatagramVectorReadMessageCountOption",
      "type" : "codeVoice"
    },
    {
      "text" : " allows users to configure the number of messages to attempt to read in a single syscall on a",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "datagram ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "DatagramVectorReadMessageCountOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/DatagramVectorReadMessageCountOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "DatagramVectorReadMessageCountOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.DatagramVectorReadMessageCountOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/datagramvectorreadmessagecountoption"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/ExplicitCongestionNotificationsOption": {
  "abstract" : [
    {
      "text" : "When set to true IP level ECN information will be reported through ",
      "type" : "text"
    },
    {
      "code" : "AddressedEnvelope.Metadata",
      "type" : "codeVoice"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ExplicitCongestionNotificationsOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/ExplicitCongestionNotificationsOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ExplicitCongestionNotificationsOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.ExplicitCongestionNotificationsOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/explicitcongestionnotificationsoption"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/LocalVsockContextID": {
  "abstract" : [
    {
      "text" : "This get-only option is used on channels backed by vsock sockets to get the local VSOCK context ID.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "LocalVsockContextID"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/LocalVsockContextID",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "LocalVsockContextID"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.LocalVsockContextID",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/localvsockcontextid"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/MaxMessagesPerReadOption": {
  "abstract" : [
    {
      "code" : "MaxMessagesPerReadOption",
      "type" : "codeVoice"
    },
    {
      "text" : " allows users to configure the maximum number of read calls to the underlying transport are performed before wait again until",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "there is more to read and be notified.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MaxMessagesPerReadOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/MaxMessagesPerReadOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MaxMessagesPerReadOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.MaxMessagesPerReadOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/maxmessagesperreadoption"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/ReceivePacketInfo": {
  "abstract" : [
    {
      "text" : "When set to true IP level Packet Info information will be reported through ",
      "type" : "text"
    },
    {
      "code" : "AddressedEnvelope.Metadata",
      "type" : "codeVoice"
    },
    {
      "text" : " for UDP packets.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ReceivePacketInfo"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/ReceivePacketInfo",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ReceivePacketInfo"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.ReceivePacketInfo",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/receivepacketinfo"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/RecvAllocatorOption": {
  "abstract" : [
    {
      "code" : "RecvAllocatorOption",
      "type" : "codeVoice"
    },
    {
      "text" : " allows users to specify the ",
      "type" : "text"
    },
    {
      "code" : "RecvByteBufferAllocator",
      "type" : "codeVoice"
    },
    {
      "text" : " to use.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "RecvAllocatorOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/RecvAllocatorOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "RecvAllocatorOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.RecvAllocatorOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/recvallocatoroption"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/SocketOption": {
  "abstract" : [
    {
      "code" : "SocketOption",
      "type" : "codeVoice"
    },
    {
      "text" : " allows users to specify configuration settings that are directly applied to the underlying socket file descriptor.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "SocketOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/SocketOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "SocketOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.SocketOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/socketoption"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/WriteBufferWaterMark": {
  "abstract" : [
    {
      "text" : "The watermark used to detect when ",
      "type" : "text"
    },
    {
      "code" : "Channel.isWritable",
      "type" : "codeVoice"
    },
    {
      "text" : " returns ",
      "type" : "text"
    },
    {
      "code" : "true",
      "type" : "codeVoice"
    },
    {
      "text" : " or ",
      "type" : "text"
    },
    {
      "code" : "false",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "WriteBufferWaterMark"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/WriteBufferWaterMark",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "WriteBufferWaterMark"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.WriteBufferWaterMark",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/writebufferwatermark"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/WriteBufferWaterMarkOption": {
  "abstract" : [
    {
      "code" : "WriteBufferWaterMarkOption",
      "type" : "codeVoice"
    },
    {
      "text" : " allows users to configure when a ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : " should be marked as writable or not. Once the amount of bytes queued in a",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : "s outbound buffer is larger than ",
      "type" : "text"
    },
    {
      "code" : "WriteBufferWaterMark.high",
      "type" : "codeVoice"
    },
    {
      "text" : " the channel will be marked as non-writable and so",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "Channel.isWritable",
      "type" : "codeVoice"
    },
    {
      "text" : " will return ",
      "type" : "text"
    },
    {
      "code" : "false",
      "type" : "codeVoice"
    },
    {
      "text" : ". Once we were able to write some data out of the outbound buffer and the amount of bytes queued",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "falls below ",
      "type" : "text"
    },
    {
      "code" : "WriteBufferWaterMark.low",
      "type" : "codeVoice"
    },
    {
      "text" : " the ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : " will become writable again. Once this happens ",
      "type" : "text"
    },
    {
      "code" : "Channel.writable",
      "type" : "codeVoice"
    },
    {
      "text" : " will return",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "true",
      "type" : "codeVoice"
    },
    {
      "text" : " again. These writability changes are also propagated through the ",
      "type" : "text"
    },
    {
      "code" : "ChannelPipeline",
      "type" : "codeVoice"
    },
    {
      "text" : " and so can be intercepted via ",
      "type" : "text"
    },
    {
      "code" : "ChannelInboundHandler.channelWritabilityChanged",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "WriteBufferWaterMarkOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/WriteBufferWaterMarkOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "WriteBufferWaterMarkOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.WriteBufferWaterMarkOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/writebufferwatermarkoption"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOptions/Types/WriteSpinOption": {
  "abstract" : [
    {
      "code" : "WriteSpinOption",
      "type" : "codeVoice"
    },
    {
      "text" : " allows users to configure the number of repetitions of a only partially successful write call before considering the ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : " not writable.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Setting this option to ",
      "type" : "text"
    },
    {
      "code" : "0",
      "type" : "codeVoice"
    },
    {
      "text" : " means that we only issue one write call and if that call does not write all the bytes,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "we consider the ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : " not writable.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "WriteSpinOption"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOptions\/Types\/WriteSpinOption",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "WriteSpinOption"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOptions.Types.WriteSpinOption",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloptions\/types\/writespinoption"
}
}
}