{
  "abstract" : [
    {
      "text" : "Finishes the sequence with the given ",
      "type" : "text"
    },
    {
      "code" : "Failure",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOThrowingAsyncSequenceProducer",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOThrowingAsyncSequenceProducer\/Source"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOThrowingAsyncSequenceProducer\/Source\/finish(_:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:7NIOCore32NIOThrowingAsyncSequenceProducerV6SourceV6finishyyq_F",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "finish"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Failure"
      },
      {
        "kind" : "text",
        "text" : ")"
      }
    ],
    "modules" : [
      {
        "name" : "NIO"
      }
    ],
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.15",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "6.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "finish(_:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "finish"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "_"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "failure"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Failure"
            },
            {
              "kind" : "text",
              "text" : ")"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The failure why the sequence finished.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "failure"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Calling this function signals the sequence that there wonâ€™t be any subsequent elements yielded.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If there are still buffered elements and there is an ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOThrowingAsyncSequenceProducer\/AsyncIterator",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " consuming the sequence,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then termination of the sequence only happens once all elements have been consumed by the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOThrowingAsyncSequenceProducer\/AsyncIterator",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Otherwise, the buffered elements will be dropped.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Calling this function more than once has no effect.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/nio\/niothrowingasyncsequenceproducer\/source\/finish(_:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "NIO",
  "type" : "topic",
  "url" : "\/documentation\/nio"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/NIOThrowingAsyncSequenceProducer": {
  "abstract" : [
    {
      "text" : "This is an ",
      "type" : "text"
    },
    {
      "code" : "AsyncSequence",
      "type" : "codeVoice"
    },
    {
      "text" : " that supports a unicast ",
      "type" : "text"
    },
    {
      "code" : "AsyncIterator",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOThrowingAsyncSequenceProducer"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOThrowingAsyncSequenceProducer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOThrowingAsyncSequenceProducer"
    }
  ],
  "role" : "symbol",
  "title" : "NIOThrowingAsyncSequenceProducer",
  "type" : "topic",
  "url" : "\/documentation\/nio\/niothrowingasyncsequenceproducer"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/NIOThrowingAsyncSequenceProducer/AsyncIterator": {
  "abstract" : [

  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Element",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Sendable",
        "type" : "codeVoice"
      },
      {
        "text" : ", ",
        "type" : "text"
      },
      {
        "code" : "Failure",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Error",
        "type" : "codeVoice"
      },
      {
        "text" : ", ",
        "type" : "text"
      },
      {
        "code" : "Strategy",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "NIOAsyncSequenceProducerBackPressureStrategy",
        "type" : "codeVoice"
      },
      {
        "text" : ", and ",
        "type" : "text"
      },
      {
        "code" : "Delegate",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "NIOAsyncSequenceProducerDelegate",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AsyncIterator"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOThrowingAsyncSequenceProducer\/AsyncIterator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AsyncIterator"
    }
  ],
  "role" : "symbol",
  "title" : "NIOThrowingAsyncSequenceProducer.AsyncIterator",
  "type" : "topic",
  "url" : "\/documentation\/nio\/niothrowingasyncsequenceproducer\/asynciterator"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/NIOThrowingAsyncSequenceProducer/Source": {
  "abstract" : [
    {
      "text" : "A struct to interface between the synchronous code of the producer and the asynchronous consumer.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "This type allows the producer to synchronously ",
      "type" : "text"
    },
    {
      "code" : "yield",
      "type" : "codeVoice"
    },
    {
      "text" : " new elements to the ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOThrowingAsyncSequenceProducer",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and to ",
      "type" : "text"
    },
    {
      "code" : "finish",
      "type" : "codeVoice"
    },
    {
      "text" : " the sequence.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Element",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Sendable",
        "type" : "codeVoice"
      },
      {
        "text" : ", ",
        "type" : "text"
      },
      {
        "code" : "Failure",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Error",
        "type" : "codeVoice"
      },
      {
        "text" : ", ",
        "type" : "text"
      },
      {
        "code" : "Strategy",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "NIOAsyncSequenceProducerBackPressureStrategy",
        "type" : "codeVoice"
      },
      {
        "text" : ", and ",
        "type" : "text"
      },
      {
        "code" : "Delegate",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "NIOAsyncSequenceProducerDelegate",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Source"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOThrowingAsyncSequenceProducer\/Source",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Source"
    }
  ],
  "role" : "symbol",
  "title" : "NIOThrowingAsyncSequenceProducer.Source",
  "type" : "topic",
  "url" : "\/documentation\/nio\/niothrowingasyncsequenceproducer\/source"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/NIOThrowingAsyncSequenceProducer/Source/finish(_:)": {
  "abstract" : [
    {
      "text" : "Finishes the sequence with the given ",
      "type" : "text"
    },
    {
      "code" : "Failure",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "finish"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Failure"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOThrowingAsyncSequenceProducer\/Source\/finish(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "finish(_:)",
  "type" : "topic",
  "url" : "\/documentation\/nio\/niothrowingasyncsequenceproducer\/source\/finish(_:)"
}
}
}