{
  "abstract" : [
    {
      "text" : "Unwraps an ",
      "type" : "text"
    },
    {
      "code" : "Optional",
      "type" : "codeVoice"
    },
    {
      "text" : " value contained inside a Future’s expectation.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "If the optional resolves to ",
      "type" : "text"
    },
    {
      "code" : "nil",
      "type" : "codeVoice"
    },
    {
      "text" : " (",
      "type" : "text"
    },
    {
      "code" : ".none",
      "type" : "codeVoice"
    },
    {
      "text" : "), the supplied error will be thrown instead.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/EventLoopFuture"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/EventLoopFuture\/unwrap(or:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "conformance" : {
      "availabilityPrefix" : [
        {
          "text" : "Available when",
          "type" : "text"
        }
      ],
      "conformancePrefix" : [
        {
          "text" : "Conforms when",
          "type" : "text"
        }
      ],
      "constraints" : [
        {
          "code" : "Value",
          "type" : "codeVoice"
        },
        {
          "text" : " conforms to ",
          "type" : "text"
        },
        {
          "code" : "OptionalType",
          "type" : "codeVoice"
        },
        {
          "text" : ".",
          "type" : "text"
        }
      ]
    },
    "extendedModule" : "NIOCore",
    "externalID" : "s:7NIOCore15EventLoopFutureC5VaporAD12OptionalTypeRzlE6unwrap2orACy07WrappedG0QzGs5Error_pyYbXA_tF",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "unwrap"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "or"
      },
      {
        "kind" : "text",
        "text" : ": () -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:s5ErrorP",
        "text" : "Error"
      },
      {
        "kind" : "text",
        "text" : ") -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7NIOCore15EventLoopFutureC",
        "text" : "EventLoopFuture"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:7NIOCore15EventLoopFutureC5VaporAD12OptionalTypeRzlE5Valuexmfp",
        "text" : "Value"
      },
      {
        "kind" : "text",
        "text" : "."
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:5Vapor12OptionalTypeP07WrappedC0Qa",
        "text" : "WrappedType"
      },
      {
        "kind" : "text",
        "text" : ">"
      }
    ],
    "modules" : [
      {
        "name" : "NIOCore"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "unwrap(or:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "unwrap"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "or"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "error"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "attribute",
              "text" : "@autoclosure"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "attribute",
              "text" : "@escaping"
            },
            {
              "kind" : "text",
              "text" : " () -> "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:s5ErrorP",
              "text" : "Error"
            },
            {
              "kind" : "text",
              "text" : ") -> "
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/EventLoopFuture",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7NIOCore15EventLoopFutureC",
              "text" : "EventLoopFuture"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7NIOCore15EventLoopFutureC5VaporAD12OptionalTypeRzlE5Valuexmfp",
              "text" : "Value"
            },
            {
              "kind" : "text",
              "text" : "."
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Vapor\/OptionalType\/WrappedType",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:5Vapor12OptionalTypeP07WrappedC0Qa",
              "text" : "WrappedType"
            },
            {
              "kind" : "text",
              "text" : ">"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "code" : "Error",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to throw if the value is ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : ". This is captured with ",
                  "type" : "text"
                },
                {
                  "code" : "@autoclosure",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "to avoid initialize the ",
                  "type" : "text"
                },
                {
                  "code" : "Error",
                  "type" : "codeVoice"
                },
                {
                  "text" : " unless needed.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "error"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "code" : [
            "print(futureString) \/\/ Future<String?>",
            "futureString.unwrap(or: MyError()) \/\/ Future<String>"
          ],
          "syntax" : null,
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/nio\/eventloopfuture\/unwrap(or:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "NIO",
  "type" : "topic",
  "url" : "\/documentation\/nio"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/EventLoopFuture": {
  "abstract" : [
    {
      "text" : "Holder for a result that will be provided later.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "EventLoopFuture"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/EventLoopFuture",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "EventLoopFuture"
    }
  ],
  "role" : "symbol",
  "title" : "EventLoopFuture",
  "type" : "topic",
  "url" : "\/documentation\/nio\/eventloopfuture"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/EventLoopFuture/unwrap(or:)": {
  "abstract" : [
    {
      "text" : "Unwraps an ",
      "type" : "text"
    },
    {
      "code" : "Optional",
      "type" : "codeVoice"
    },
    {
      "text" : " value contained inside a Future’s expectation.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "If the optional resolves to ",
      "type" : "text"
    },
    {
      "code" : "nil",
      "type" : "codeVoice"
    },
    {
      "text" : " (",
      "type" : "text"
    },
    {
      "code" : ".none",
      "type" : "codeVoice"
    },
    {
      "text" : "), the supplied error will be thrown instead.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Value",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "OptionalType",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "unwrap"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "or"
    },
    {
      "kind" : "text",
      "text" : ": () -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s5ErrorP",
      "text" : "Error"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7NIOCore15EventLoopFutureC",
      "text" : "EventLoopFuture"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7NIOCore15EventLoopFutureC5VaporAD12OptionalTypeRzlE5Valuexmfp",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Vapor12OptionalTypeP07WrappedC0Qa",
      "text" : "WrappedType"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/EventLoopFuture\/unwrap(or:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "unwrap(or:)",
  "type" : "topic",
  "url" : "\/documentation\/nio\/eventloopfuture\/unwrap(or:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/Vapor/OptionalType/WrappedType": {
  "abstract" : [
    {
      "text" : "Underlying wrapped type.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "associatedtype"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "WrappedType"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/Vapor\/OptionalType\/WrappedType",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "WrappedType",
  "type" : "topic",
  "url" : "\/documentation\/vapor\/optionaltype\/wrappedtype"
}
}
}