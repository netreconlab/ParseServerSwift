{
  "abstract" : [
    {
      "code" : "ChannelHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " which handles outbound I\/O events or intercept an outbound I\/O operation for a ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOutboundHandler"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:7NIOCore22ChannelOutboundHandlerP",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "protocol"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "ChannelOutboundHandler"
      }
    ],
    "modules" : [
      {
        "name" : "NIO"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "ChannelOutboundHandler"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Protocol",
    "symbolKind" : "protocol",
    "title" : "ChannelOutboundHandler"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "protocol"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "ChannelOutboundHandler"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "_ChannelOutboundHandler"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "_EmittingChannelHandler"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Please refer to ",
              "type" : "text"
            },
            {
              "code" : "_ChannelOutboundHandler",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "_EmittingChannelHandler",
              "type" : "codeVoice"
            },
            {
              "text" : " for more details on the provided methods.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelHandler"
      ],
      "kind" : "relationships",
      "title" : "Inherits From",
      "type" : "inheritsFrom"
    },
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/AcceptBackoffHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/BackPressureHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ByteToMessageHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/DebugOutboundEventsHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ServerCodec",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/HTTP2StreamMultiplexer",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ClientCodec",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ServerCodec",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/HTTPRequestEncoder",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/HTTPResponseEncoder",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/HTTPServerPipelineHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/HTTPServerProtocolErrorHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/IdleStateHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/LengthFieldPrepender",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/MessageToByteHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOTransportServices\/NIOFilterEmptyWritesHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/NIOHTTP1ProxyConnectHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/NIOHTTP2Handler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTPCompression\/NIOHTTPRequestCompressor",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTPCompression\/NIOHTTPRequestDecompressor",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPRequestHeadersValidator",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTPCompression\/NIOHTTPResponseDecompressor",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPResponseHeadersValidator",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/NIOJSONRPCFraming\/ContentLengthHeaderFrameEncoder",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/NIORequestResponseWithIDHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSSL\/NIOSSLClientHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSSL\/NIOSSLHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSSL\/NIOSSLServerHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/NIOWritePCAPHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/RequestResponseHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSOCKS\/SOCKSClientHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSOCKS\/SOCKSServerHandshakeHandler",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOWebSocket\/WebSocketFrameEncoder"
      ],
      "kind" : "relationships",
      "title" : "Conforming Types",
      "type" : "conformingTypes"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOutboundHandler\/OutboundIn"
      ],
      "title" : "Associated Types"
    },
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOutboundHandler\/unwrapOutboundIn(_:)-7u2n"
      ],
      "title" : "Instance Methods"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/nio\/channeloutboundhandler"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "NIO",
  "type" : "topic",
  "url" : "\/documentation\/nio"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/AcceptBackoffHandler": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "ChannelHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that implements a backoff for a ",
      "type" : "text"
    },
    {
      "code" : "ServerChannel",
      "type" : "codeVoice"
    },
    {
      "text" : " when accept produces an ",
      "type" : "text"
    },
    {
      "code" : "IOError",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "These errors are often recoverable by reducing the rate at which we call accept.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AcceptBackoffHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/AcceptBackoffHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AcceptBackoffHandler"
    }
  ],
  "role" : "symbol",
  "title" : "AcceptBackoffHandler",
  "type" : "topic",
  "url" : "\/documentation\/nio\/acceptbackoffhandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/BackPressureHandler": {
  "abstract" : [
    {
      "text" : "ChannelHandler implementation which enforces back-pressure by stopping to read from the remote peer when it cannot write back fast enough.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "It will start reading again once pending data was written.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BackPressureHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/BackPressureHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "BackPressureHandler"
    }
  ],
  "role" : "symbol",
  "title" : "BackPressureHandler",
  "type" : "topic",
  "url" : "\/documentation\/nio\/backpressurehandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ByteToMessageHandler": {
  "abstract" : [
    {
      "text" : "A handler which turns a given ",
      "type" : "text"
    },
    {
      "code" : "ByteToMessageDecoder",
      "type" : "codeVoice"
    },
    {
      "text" : " into a ",
      "type" : "text"
    },
    {
      "code" : "ChannelInboundHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that can then be added to a",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "ChannelPipeline",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Decoder",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "WriteObservingByteToMessageDecoder",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ByteToMessageHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ByteToMessageHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ByteToMessageHandler"
    }
  ],
  "role" : "symbol",
  "title" : "ByteToMessageHandler",
  "type" : "topic",
  "url" : "\/documentation\/nio\/bytetomessagehandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelHandler": {
  "abstract" : [
    {
      "text" : "Base protocol for handlers that handle I\/O events or intercept an I\/O operation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ChannelHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ChannelHandler"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelHandler",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channelhandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOutboundHandler": {
  "abstract" : [
    {
      "code" : "ChannelHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " which handles outbound I\/O events or intercept an outbound I\/O operation for a ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ChannelOutboundHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOutboundHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ChannelOutboundHandler"
    }
  ],
  "role" : "symbol",
  "title" : "ChannelOutboundHandler",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloutboundhandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOutboundHandler/OutboundIn": {
  "abstract" : [
    {
      "text" : "The type of the outbound data which is wrapped in ",
      "type" : "text"
    },
    {
      "code" : "NIOAny",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "associatedtype"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "OutboundIn"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOutboundHandler\/OutboundIn",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "OutboundIn",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloutboundhandler\/outboundin"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/ChannelOutboundHandler/unwrapOutboundIn(_:)-7u2n": {
  "abstract" : [
    {
      "text" : "Unwrap the provided ",
      "type" : "text"
    },
    {
      "code" : "NIOAny",
      "type" : "codeVoice"
    },
    {
      "text" : " that was passed to ",
      "type" : "text"
    },
    {
      "code" : "write",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "defaultImplementations" : 2,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "unwrapOutboundIn"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7NIOCore6NIOAnyV",
      "text" : "NIOAny"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "text" : "OutboundIn"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/ChannelOutboundHandler\/unwrapOutboundIn(_:)-7u2n",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "unwrapOutboundIn(_:)",
  "type" : "topic",
  "url" : "\/documentation\/nio\/channeloutboundhandler\/unwrapoutboundin(_:)-7u2n"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/IdleStateHandler": {
  "abstract" : [
    {
      "text" : "Triggers an IdleStateEvent when a Channel has not performed read, write, or both operation for a while.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "IdleStateHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/IdleStateHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "IdleStateHandler"
    }
  ],
  "role" : "symbol",
  "title" : "IdleStateHandler",
  "type" : "topic",
  "url" : "\/documentation\/nio\/idlestatehandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/MessageToByteHandler": {
  "abstract" : [
    {
      "text" : "A handler which turns a given ",
      "type" : "text"
    },
    {
      "code" : "MessageToByteEncoder",
      "type" : "codeVoice"
    },
    {
      "text" : " into a ",
      "type" : "text"
    },
    {
      "code" : "ChannelOutboundHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that can then be added to a",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "ChannelPipeline",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MessageToByteHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/MessageToByteHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MessageToByteHandler"
    }
  ],
  "role" : "symbol",
  "title" : "MessageToByteHandler",
  "type" : "topic",
  "url" : "\/documentation\/nio\/messagetobytehandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOExtras/DebugInboundEventsHandler": {
  "abstract" : [
    {
      "code" : "ChannelInboundHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that prints all inbound events that pass through the pipeline by default,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "overridable by providing your own closure for custom logging. See ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/DebugOutboundEventsHandler",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " for outbound events.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "DebugInboundEventsHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/DebugInboundEventsHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "DebugInboundEventsHandler"
    }
  ],
  "role" : "symbol",
  "title" : "DebugInboundEventsHandler",
  "type" : "topic",
  "url" : "\/documentation\/nioextras\/debuginboundeventshandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOExtras/DebugOutboundEventsHandler": {
  "abstract" : [
    {
      "text" : "ChannelOutboundHandler that prints all outbound events that pass through the pipeline by default,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "overridable by providing your own closure for custom logging. See ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/DebugInboundEventsHandler",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " for inbound events.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "DebugOutboundEventsHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/DebugOutboundEventsHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "DebugOutboundEventsHandler"
    }
  ],
  "role" : "symbol",
  "title" : "DebugOutboundEventsHandler",
  "type" : "topic",
  "url" : "\/documentation\/nioextras\/debugoutboundeventshandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOExtras/LengthFieldPrepender": {
  "abstract" : [
    {
      "text" : "An encoder that takes a ",
      "type" : "text"
    },
    {
      "code" : "ByteBuffer",
      "type" : "codeVoice"
    },
    {
      "text" : " message and prepends the number of bytes in the message.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "The length field is always the same fixed length specified on construction.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "These bytes contain a binary specification of the message size.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "LengthFieldPrepender"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/LengthFieldPrepender",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "LengthFieldPrepender"
    }
  ],
  "role" : "symbol",
  "title" : "LengthFieldPrepender",
  "type" : "topic",
  "url" : "\/documentation\/nioextras\/lengthfieldprepender"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOExtras/NIOHTTP1ProxyConnectHandler": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOHTTP1ProxyConnectHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/NIOHTTP1ProxyConnectHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOHTTP1ProxyConnectHandler"
    }
  ],
  "role" : "symbol",
  "title" : "NIOHTTP1ProxyConnectHandler",
  "type" : "topic",
  "url" : "\/documentation\/nioextras\/niohttp1proxyconnecthandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOExtras/NIOJSONRPCFraming/ContentLengthHeaderFrameEncoder": {
  "abstract" : [
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/NIOJSONRPCFraming\/ContentLengthHeaderFrameEncoder",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " is responsible for emitting JSON-RPC wire protocol with ‘Content-Length’",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "HTTP-like headers as used by for example by LSP (Language Server Protocol).",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ContentLengthHeaderFrameEncoder"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/NIOJSONRPCFraming\/ContentLengthHeaderFrameEncoder",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ContentLengthHeaderFrameEncoder"
    }
  ],
  "role" : "symbol",
  "title" : "NIOJSONRPCFraming.ContentLengthHeaderFrameEncoder",
  "type" : "topic",
  "url" : "\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOExtras/NIORequestResponseWithIDHandler": {
  "abstract" : [
    {
      "code" : "NIORequestResponseWithIDHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " receives a ",
      "type" : "text"
    },
    {
      "code" : "Request",
      "type" : "codeVoice"
    },
    {
      "text" : " alongside an ",
      "type" : "text"
    },
    {
      "code" : "EventLoopPromise<Response>",
      "type" : "codeVoice"
    },
    {
      "text" : " from the",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : "‘s outbound side. It will fulfill the promise with the ",
      "type" : "text"
    },
    {
      "code" : "Response",
      "type" : "codeVoice"
    },
    {
      "text" : " once it’s received from the ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : "’s",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "inbound side. Requests and responses can arrive out-of-order and are matched by the virtue of being",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "NIORequestIdentifiable",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIORequestResponseWithIDHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/NIORequestResponseWithIDHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIORequestResponseWithIDHandler"
    }
  ],
  "role" : "symbol",
  "title" : "NIORequestResponseWithIDHandler",
  "type" : "topic",
  "url" : "\/documentation\/nioextras\/niorequestresponsewithidhandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOExtras/NIOWritePCAPHandler": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "ChannelHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that can write a ",
      "type" : "text"
    },
    {
      "identifier" : "https:\/\/en.wikipedia.org\/wiki\/Pcap",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " containing the send\/received",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "data as synthesized TCP packet captures.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOWritePCAPHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/NIOWritePCAPHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOWritePCAPHandler"
    }
  ],
  "role" : "symbol",
  "title" : "NIOWritePCAPHandler",
  "type" : "topic",
  "url" : "\/documentation\/nioextras\/niowritepcaphandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOExtras/RequestResponseHandler": {
  "abstract" : [
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/RequestResponseHandler",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " receives a ",
      "type" : "text"
    },
    {
      "code" : "Request",
      "type" : "codeVoice"
    },
    {
      "text" : " alongside an ",
      "type" : "text"
    },
    {
      "code" : "EventLoopPromise<Response>",
      "type" : "codeVoice"
    },
    {
      "text" : " from the ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : "‘s",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "outbound side. It will fulfill the promise with the ",
      "type" : "text"
    },
    {
      "code" : "Response",
      "type" : "codeVoice"
    },
    {
      "text" : " once it’s received from the ",
      "type" : "text"
    },
    {
      "code" : "Channel",
      "type" : "codeVoice"
    },
    {
      "text" : "’s inbound",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "side.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "RequestResponseHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOExtras\/RequestResponseHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "RequestResponseHandler"
    }
  ],
  "role" : "symbol",
  "title" : "RequestResponseHandler",
  "type" : "topic",
  "url" : "\/documentation\/nioextras\/requestresponsehandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/HTTPRequestEncoder": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "ChannelOutboundHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that can serialize HTTP requests.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HTTPRequestEncoder"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/HTTPRequestEncoder",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HTTPRequestEncoder"
    }
  ],
  "role" : "symbol",
  "title" : "HTTPRequestEncoder",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/httprequestencoder"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/HTTPResponseEncoder": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "ChannelOutboundHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that can serialize HTTP responses.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HTTPResponseEncoder"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/HTTPResponseEncoder",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HTTPResponseEncoder"
    }
  ],
  "role" : "symbol",
  "title" : "HTTPResponseEncoder",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/httpresponseencoder"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/HTTPServerPipelineHandler": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "ChannelHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that handles HTTP pipelining by buffering inbound data until a",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "response has been sent.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HTTPServerPipelineHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/HTTPServerPipelineHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HTTPServerPipelineHandler"
    }
  ],
  "role" : "symbol",
  "title" : "HTTPServerPipelineHandler",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/httpserverpipelinehandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/HTTPServerProtocolErrorHandler": {
  "abstract" : [
    {
      "text" : "A simple channel handler that catches errors emitted by parsing HTTP requests",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and sends 400 Bad Request responses.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HTTPServerProtocolErrorHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/HTTPServerProtocolErrorHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HTTPServerProtocolErrorHandler"
    }
  ],
  "role" : "symbol",
  "title" : "HTTPServerProtocolErrorHandler",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/httpserverprotocolerrorhandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler": {
  "abstract" : [
    {
      "text" : "A client-side channel handler that sends a HTTP upgrade handshake request to perform a HTTP-upgrade.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "When the first HTTP request is sent, this handler will add all appropriate headers to perform an upgrade to",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "the a protocol. It may add headers for a set of protocols in preference order.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "If the upgrade fails (i.e. response is not 101 Switching Protocols), this handler simply",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "removes itself from the pipeline. If the upgrade is successful, it upgrades the pipeline to the new protocol.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOHTTPClientUpgradeHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOHTTPClientUpgradeHandler"
    }
  ],
  "role" : "symbol",
  "title" : "NIOHTTPClientUpgradeHandler",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/niohttpclientupgradehandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/NIOHTTPRequestHeadersValidator": {
  "abstract" : [
    {
      "text" : "A ChannelHandler to validate that outbound request headers are spec-compliant.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOHTTPRequestHeadersValidator"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPRequestHeadersValidator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOHTTPRequestHeadersValidator"
    }
  ],
  "role" : "symbol",
  "title" : "NIOHTTPRequestHeadersValidator",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/niohttprequestheadersvalidator"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP1/NIOHTTPResponseHeadersValidator": {
  "abstract" : [
    {
      "text" : "A ChannelHandler to validate that outbound response headers are spec-compliant.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOHTTPResponseHeadersValidator"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP1\/NIOHTTPResponseHeadersValidator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOHTTPResponseHeadersValidator"
    }
  ],
  "role" : "symbol",
  "title" : "NIOHTTPResponseHeadersValidator",
  "type" : "topic",
  "url" : "\/documentation\/niohttp1\/niohttpresponseheadersvalidator"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec": {
  "abstract" : [
    {
      "text" : "A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and vice versa, for use on the client side.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HTTP2FramePayloadToHTTP1ClientCodec"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HTTP2FramePayloadToHTTP1ClientCodec"
    }
  ],
  "role" : "symbol",
  "title" : "HTTP2FramePayloadToHTTP1ClientCodec",
  "type" : "topic",
  "url" : "\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ServerCodec": {
  "abstract" : [
    {
      "text" : "A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and vice versa, for use on the server side.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HTTP2FramePayloadToHTTP1ServerCodec"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ServerCodec",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HTTP2FramePayloadToHTTP1ServerCodec"
    }
  ],
  "role" : "symbol",
  "title" : "HTTP2FramePayloadToHTTP1ServerCodec",
  "type" : "topic",
  "url" : "\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP2/HTTP2StreamMultiplexer": {
  "abstract" : [
    {
      "text" : "A channel handler that creates a child channel for each HTTP\/2 stream.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HTTP2StreamMultiplexer"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/HTTP2StreamMultiplexer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HTTP2StreamMultiplexer"
    }
  ],
  "role" : "symbol",
  "title" : "HTTP2StreamMultiplexer",
  "type" : "topic",
  "url" : "\/documentation\/niohttp2\/http2streammultiplexer"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP2/HTTP2ToHTTP1ClientCodec": {
  "abstract" : [
    {
      "text" : "A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and vice versa, for use on the client side.",
      "type" : "text"
    }
  ],
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HTTP2ToHTTP1ClientCodec"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ClientCodec",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HTTP2ToHTTP1ClientCodec"
    }
  ],
  "role" : "symbol",
  "title" : "HTTP2ToHTTP1ClientCodec",
  "type" : "topic",
  "url" : "\/documentation\/niohttp2\/http2tohttp1clientcodec"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP2/HTTP2ToHTTP1ServerCodec": {
  "abstract" : [
    {
      "text" : "A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and vice versa, for use on the server side.",
      "type" : "text"
    }
  ],
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HTTP2ToHTTP1ServerCodec"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ServerCodec",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HTTP2ToHTTP1ServerCodec"
    }
  ],
  "role" : "symbol",
  "title" : "HTTP2ToHTTP1ServerCodec",
  "type" : "topic",
  "url" : "\/documentation\/niohttp2\/http2tohttp1servercodec"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTP2/NIOHTTP2Handler": {
  "abstract" : [
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/NIOHTTP2Handler",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " implements the HTTP\/2 protocol for a single connection.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOHTTP2Handler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTP2\/NIOHTTP2Handler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOHTTP2Handler"
    }
  ],
  "role" : "symbol",
  "title" : "NIOHTTP2Handler",
  "type" : "topic",
  "url" : "\/documentation\/niohttp2\/niohttp2handler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTPCompression/HTTPResponseCompressor": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " is a duplex channel handler that handles automatic streaming compression of",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "HTTP responses. It respects the client’s Accept-Encoding preferences, including q-values if present,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and ensures that clients are served the compression algorithm that works best for them.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "HTTPResponseCompressor"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "HTTPResponseCompressor"
    }
  ],
  "role" : "symbol",
  "title" : "HTTPResponseCompressor",
  "type" : "topic",
  "url" : "\/documentation\/niohttpcompression\/httpresponsecompressor"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTPCompression/NIOHTTPRequestCompressor": {
  "abstract" : [
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTPCompression\/NIOHTTPRequestCompressor",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " is an outbound channel handler that handles automatic streaming compression of",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "HTTP requests.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOHTTPRequestCompressor"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTPCompression\/NIOHTTPRequestCompressor",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOHTTPRequestCompressor"
    }
  ],
  "role" : "symbol",
  "title" : "NIOHTTPRequestCompressor",
  "type" : "topic",
  "url" : "\/documentation\/niohttpcompression\/niohttprequestcompressor"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTPCompression/NIOHTTPRequestDecompressor": {
  "abstract" : [
    {
      "text" : "Channel hander to decompress incoming HTTP data.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOHTTPRequestDecompressor"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTPCompression\/NIOHTTPRequestDecompressor",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOHTTPRequestDecompressor"
    }
  ],
  "role" : "symbol",
  "title" : "NIOHTTPRequestDecompressor",
  "type" : "topic",
  "url" : "\/documentation\/niohttpcompression\/niohttprequestdecompressor"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOHTTPCompression/NIOHTTPResponseDecompressor": {
  "abstract" : [
    {
      "text" : "Duplex channel handler which will accept deflate and gzip encoded responses and decompress them.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOHTTPResponseDecompressor"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOHTTPCompression\/NIOHTTPResponseDecompressor",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOHTTPResponseDecompressor"
    }
  ],
  "role" : "symbol",
  "title" : "NIOHTTPResponseDecompressor",
  "type" : "topic",
  "url" : "\/documentation\/niohttpcompression\/niohttpresponsedecompressor"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOSOCKS/ClientMessage": {
  "abstract" : [
    {
      "text" : "Sent by the client and received by the server.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ClientMessage"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSOCKS\/ClientMessage",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ClientMessage"
    }
  ],
  "role" : "symbol",
  "title" : "ClientMessage",
  "type" : "topic",
  "url" : "\/documentation\/niosocks\/clientmessage"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOSOCKS/SOCKSClientHandler": {
  "abstract" : [
    {
      "text" : "Connects to a SOCKS server to establish a proxied connection",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "to a host. This handler should be inserted at the beginning of a",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "channel’s pipeline. Note that SOCKS only supports fully-qualified",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "domain names and IPv4 or IPv6 sockets, and not UNIX sockets.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "SOCKSClientHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSOCKS\/SOCKSClientHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "SOCKSClientHandler"
    }
  ],
  "role" : "symbol",
  "title" : "SOCKSClientHandler",
  "type" : "topic",
  "url" : "\/documentation\/niosocks\/socksclienthandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOSOCKS/SOCKSServerHandshakeHandler": {
  "abstract" : [
    {
      "text" : "Add this handshake handler to the front of your channel, closest to the network.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "The handler will receive bytes from the network and run them through a state machine",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and parser to enforce SOCKSv5 protocol correctness. Inbound bytes will by parsed into",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSOCKS\/ClientMessage",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " for downstream consumption. Send ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSOCKS\/ServerMessage",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " to this",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "handler.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "SOCKSServerHandshakeHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSOCKS\/SOCKSServerHandshakeHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "SOCKSServerHandshakeHandler"
    }
  ],
  "role" : "symbol",
  "title" : "SOCKSServerHandshakeHandler",
  "type" : "topic",
  "url" : "\/documentation\/niosocks\/socksserverhandshakehandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOSOCKS/ServerMessage": {
  "abstract" : [
    {
      "text" : "Sent by the server and received by the client.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ServerMessage"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSOCKS\/ServerMessage",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ServerMessage"
    }
  ],
  "role" : "symbol",
  "title" : "ServerMessage",
  "type" : "topic",
  "url" : "\/documentation\/niosocks\/servermessage"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOSSL/NIOSSLClientHandler": {
  "abstract" : [
    {
      "text" : "A channel handler that wraps a channel in TLS using NIOSSL.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "This handler can be used in channels that are acting as the client",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "in the TLS dialog. For server connections, use the ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSSL\/NIOSSLServerHandler",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOSSLClientHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSSL\/NIOSSLClientHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOSSLClientHandler"
    }
  ],
  "role" : "symbol",
  "title" : "NIOSSLClientHandler",
  "type" : "topic",
  "url" : "\/documentation\/niossl\/niosslclienthandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOSSL/NIOSSLHandler": {
  "abstract" : [
    {
      "text" : "The base class for all NIOSSL handlers.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOSSLHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSSL\/NIOSSLHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOSSLHandler"
    }
  ],
  "role" : "symbol",
  "title" : "NIOSSLHandler",
  "type" : "topic",
  "url" : "\/documentation\/niossl\/niosslhandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOSSL/NIOSSLServerHandler": {
  "abstract" : [
    {
      "text" : "A channel handler that wraps a channel in TLS using NIOSSL. This",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "handler can be used in channels that are acting as the server in",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "the TLS dialog. For client connections, use the ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSSL\/NIOSSLClientHandler",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOSSLServerHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOSSL\/NIOSSLServerHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOSSLServerHandler"
    }
  ],
  "role" : "symbol",
  "title" : "NIOSSLServerHandler",
  "type" : "topic",
  "url" : "\/documentation\/niossl\/niosslserverhandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOTransportServices/NIOFilterEmptyWritesHandler": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "ChannelHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that checks for outbound writes of zero length, which are then dropped. This is",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "due to a bug in ",
      "type" : "text"
    },
    {
      "code" : "Network Framework",
      "type" : "codeVoice"
    },
    {
      "text" : ", where zero byte TCP writes lead to stalled connections.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Write promises are confirmed in the correct order.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOFilterEmptyWritesHandler"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOTransportServices\/NIOFilterEmptyWritesHandler",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOFilterEmptyWritesHandler"
    }
  ],
  "role" : "symbol",
  "title" : "NIOFilterEmptyWritesHandler",
  "type" : "topic",
  "url" : "\/documentation\/niotransportservices\/niofilteremptywriteshandler"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIOWebSocket/WebSocketFrameEncoder": {
  "abstract" : [
    {
      "text" : "An inbound ",
      "type" : "text"
    },
    {
      "code" : "ChannelHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " that serializes structured websocket frames into a byte stream",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "for sending on the network.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "WebSocketFrameEncoder"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIOWebSocket\/WebSocketFrameEncoder",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "WebSocketFrameEncoder"
    }
  ],
  "role" : "symbol",
  "title" : "WebSocketFrameEncoder",
  "type" : "topic",
  "url" : "\/documentation\/niowebsocket\/websocketframeencoder"
},
"https://en.wikipedia.org/wiki/Pcap": {
  "identifier" : "https:\/\/en.wikipedia.org\/wiki\/Pcap",
  "title" : ".pcap file",
  "titleInlineContent" : [
    {
      "code" : ".pcap",
      "type" : "codeVoice"
    },
    {
      "text" : " file",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/en.wikipedia.org\/wiki\/Pcap"
}
}
}