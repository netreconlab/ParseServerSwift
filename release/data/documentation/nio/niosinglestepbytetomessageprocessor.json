{
  "abstract" : [
    {
      "code" : "NIOSingleStepByteToMessageProcessor",
      "type" : "codeVoice"
    },
    {
      "text" : " uses a ",
      "type" : "text"
    },
    {
      "code" : "NIOSingleStepByteToMessageDecoder",
      "type" : "codeVoice"
    },
    {
      "text" : " to produce messages",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "from a stream of incoming bytes. It works like ",
      "type" : "text"
    },
    {
      "code" : "ByteToMessageHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " but may be used outside of the channel pipeline. This allows",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "processing of wrapped protocols in a general way.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:7NIOCore35NIOSingleStepByteToMessageProcessorC",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "class"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "NIOSingleStepByteToMessageProcessor"
      }
    ],
    "modules" : [
      {
        "name" : "NIO"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "NIOSingleStepByteToMessageProcessor"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Class",
    "symbolKind" : "class",
    "title" : "NIOSingleStepByteToMessageProcessor"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "final"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "class"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "NIOSingleStepByteToMessageProcessor"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "genericParameter",
              "text" : "Decoder"
            },
            {
              "kind" : "text",
              "text" : "> "
            },
            {
              "kind" : "keyword",
              "text" : "where"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Decoder"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageDecoder",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7NIOCore33NIOSingleStepByteToMessageDecoderP",
              "text" : "NIOSingleStepByteToMessageDecoder"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "NIOSingleStepByteToMessageProcessor",
              "type" : "codeVoice"
            },
            {
              "text" : " is first initialized with a ",
              "type" : "text"
            },
            {
              "code" : "NIOSingleStepByteToMessageDecoder",
              "type" : "codeVoice"
            },
            {
              "text" : ". Then",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "call ",
              "type" : "text"
            },
            {
              "code" : "process",
              "type" : "codeVoice"
            },
            {
              "text" : " as each ",
              "type" : "text"
            },
            {
              "code" : "ByteBuffer",
              "type" : "codeVoice"
            },
            {
              "text" : " is received from the stream. The closure is called repeatedly with each message produced by",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the decoder.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When your stream ends, call ",
              "type" : "text"
            },
            {
              "code" : "finishProcessing",
              "type" : "codeVoice"
            },
            {
              "text" : " to ensure all buffered data is passed to your decoder. This will call ",
              "type" : "text"
            },
            {
              "code" : "decodeLast",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "one or more times with any remaining data.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Example",
          "level" : 3,
          "text" : "Example",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Below is an example of a protocol decoded by ",
              "type" : "text"
            },
            {
              "code" : "TwoByteStringCodec",
              "type" : "codeVoice"
            },
            {
              "text" : " that is sent over HTTP. ",
              "type" : "text"
            },
            {
              "code" : "RawBodyMessageHandler",
              "type" : "codeVoice"
            },
            {
              "text" : " forwards the headers",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and trailers directly and uses ",
              "type" : "text"
            },
            {
              "code" : "NIOSingleStepByteToMessageProcessor",
              "type" : "codeVoice"
            },
            {
              "text" : " to send whole decoded messages.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class TwoByteStringCodec: NIOSingleStepByteToMessageDecoder {",
            "    typealias InboundOut = String",
            "",
            "    public func decode(buffer: inout ByteBuffer) throws -> InboundOut? {",
            "        return buffer.readString(length: 2)",
            "    }",
            "",
            "    public func decodeLast(buffer: inout ByteBuffer, seenEOF: Bool) throws -> InboundOut? {",
            "        return try self.decode(buffer: &buffer)",
            "    }",
            "}",
            "",
            "class RawBodyMessageHandler: ChannelInboundHandler {",
            "    typealias InboundIn = HTTPServerRequestPart \/\/ alias for HTTPPart<HTTPRequestHead, ByteBuffer>",
            "    \/\/ This converts the body from ByteBuffer to String, our message type",
            "    typealias InboundOut = HTTPPart<HTTPRequestHead, String>",
            "",
            "    private var messageProcessor: NIOSingleStepByteToMessageProcessor<TwoByteStringCodec>? = nil",
            "",
            "    func channelRead(context: ChannelHandlerContext, data: NIOAny) {",
            "        let req = self.unwrapInboundIn(data)",
            "        do {",
            "            switch req {",
            "            case .head(let head):",
            "                \/\/ simply forward on the head",
            "                context.fireChannelRead(self.wrapInboundOut(.head(head)))",
            "            case .body(let body):",
            "                if self.messageProcessor == nil {",
            "                    self.messageProcessor = NIOSingleStepByteToMessageProcessor(TwoByteStringCodec())",
            "                }",
            "                try self.messageProcessor!.process(buffer: body) { message in",
            "                    self.channelReadMessage(context: context, message: message)",
            "                }",
            "            case .end(let trailers):",
            "                \/\/ Forward on any remaining messages and the trailers",
            "                try self.messageProcessor?.finishProcessing(seenEOF: false) { message in",
            "                    self.channelReadMessage(context: context, message: message)",
            "                }",
            "                context.fireChannelRead(self.wrapInboundOut(.end(trailers)))",
            "            }",
            "        } catch {",
            "            context.fireErrorCaught(error)",
            "        }",
            "    }",
            "",
            "    \/\/ Forward on the body messages as whole messages",
            "    func channelReadMessage(context: ChannelHandlerContext, message: String) {",
            "        context.fireChannelRead(self.wrapInboundOut(.body(message)))",
            "    }",
            "}",
            "",
            "private class DecodedBodyHTTPHandler: ChannelInboundHandler {",
            "    typealias InboundIn = HTTPPart<HTTPRequestHead, String>",
            "    typealias OutboundOut = HTTPServerResponsePart",
            "",
            "    var msgs: [String] = []",
            "",
            "    func channelRead(context: ChannelHandlerContext, data: NIOAny) {",
            "        let message = self.unwrapInboundIn(data)",
            "",
            "        switch message {",
            "        case .head(let head):",
            "            print(\"head: \\(head)\")",
            "        case .body(let msg):",
            "            self.msgs.append(msg)",
            "        case .end(let trailers):",
            "            print(\"trailers: \\(trailers)\")",
            "            var responseBuffer = context.channel.allocator.buffer(capacity: 32)",
            "            for msg in msgs {",
            "                responseBuffer.writeString(msg)",
            "                responseBuffer.writeStaticString(\"\\n\")",
            "            }",
            "            var headers = HTTPHeaders()",
            "            headers.add(name: \"content-length\", value: String(responseBuffer.readableBytes))",
            "",
            "            context.write(self.wrapOutboundOut(HTTPServerResponsePart.head(",
            "                HTTPResponseHead(version: .http1_1,",
            "                                 status: .ok, headers: headers))), promise: nil)",
            "",
            "            context.write(self.wrapOutboundOut(HTTPServerResponsePart.body(",
            "                .byteBuffer(responseBuffer))), promise: nil)",
            "            context.writeAndFlush(self.wrapOutboundOut(HTTPServerResponsePart.end(nil)), promise: nil)",
            "        }",
            "    }",
            "}",
            "",
            "let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)",
            "let bootstrap = ServerBootstrap(group: group).childChannelInitializer({channel in",
            "    channel.pipeline.configureHTTPServerPipeline(withPipeliningAssistance: true, withErrorHandling: true).flatMap { _ in",
            "        channel.pipeline.addHandlers([RawBodyMessageHandler(), DecodedBodyHTTPHandler()])",
            "    }",
            "})",
            "let channelFuture = bootstrap.bind(host: \"127.0.0.1\", port: 0)"
          ],
          "syntax" : null,
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s8SendableP"
      ],
      "kind" : "relationships",
      "title" : "Conforms To",
      "type" : "conformsTo"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/init(_:maximumBufferSize:)"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/unprocessedBytes"
      ],
      "title" : "Instance Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/finishProcessing(seenEOF:_:)",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/process(buffer:_:)"
      ],
      "title" : "Instance Methods"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/nio\/niosinglestepbytetomessageprocessor"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "NIO",
  "type" : "topic",
  "url" : "\/documentation\/nio"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/NIOSingleStepByteToMessageDecoder": {
  "abstract" : [
    {
      "text" : "A simplified version of ",
      "type" : "text"
    },
    {
      "code" : "ByteToMessageDecoder",
      "type" : "codeVoice"
    },
    {
      "text" : " that can generate zero or one messages for each invocation of ",
      "type" : "text"
    },
    {
      "code" : "decode",
      "type" : "codeVoice"
    },
    {
      "text" : " or ",
      "type" : "text"
    },
    {
      "code" : "decodeLast",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Having ",
      "type" : "text"
    },
    {
      "code" : "decode",
      "type" : "codeVoice"
    },
    {
      "text" : " and ",
      "type" : "text"
    },
    {
      "code" : "decodeLast",
      "type" : "codeVoice"
    },
    {
      "text" : " return an optional message avoids re-entrancy problems, since the functions relinquish exclusive access",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "to the ",
      "type" : "text"
    },
    {
      "code" : "ByteBuffer",
      "type" : "codeVoice"
    },
    {
      "text" : " when returning. This allows for greatly simplified processing.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOSingleStepByteToMessageDecoder"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageDecoder",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOSingleStepByteToMessageDecoder"
    }
  ],
  "role" : "symbol",
  "title" : "NIOSingleStepByteToMessageDecoder",
  "type" : "topic",
  "url" : "\/documentation\/nio\/niosinglestepbytetomessagedecoder"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/NIOSingleStepByteToMessageProcessor": {
  "abstract" : [
    {
      "code" : "NIOSingleStepByteToMessageProcessor",
      "type" : "codeVoice"
    },
    {
      "text" : " uses a ",
      "type" : "text"
    },
    {
      "code" : "NIOSingleStepByteToMessageDecoder",
      "type" : "codeVoice"
    },
    {
      "text" : " to produce messages",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "from a stream of incoming bytes. It works like ",
      "type" : "text"
    },
    {
      "code" : "ByteToMessageHandler",
      "type" : "codeVoice"
    },
    {
      "text" : " but may be used outside of the channel pipeline. This allows",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "processing of wrapped protocols in a general way.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NIOSingleStepByteToMessageProcessor"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NIOSingleStepByteToMessageProcessor"
    }
  ],
  "role" : "symbol",
  "title" : "NIOSingleStepByteToMessageProcessor",
  "type" : "topic",
  "url" : "\/documentation\/nio\/niosinglestepbytetomessageprocessor"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/NIOSingleStepByteToMessageProcessor/finishProcessing(seenEOF:_:)": {
  "abstract" : [
    {
      "text" : "Call when there is no data left in the stream. Calls ",
      "type" : "text"
    },
    {
      "code" : "Decoder",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    },
    {
      "code" : "decodeLast",
      "type" : "codeVoice"
    },
    {
      "text" : " one or more times. If there is no data left",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "decodeLast",
      "type" : "codeVoice"
    },
    {
      "text" : " will be called one time with an empty ",
      "type" : "text"
    },
    {
      "code" : "ByteBuffer",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Decoder",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "NIOSingleStepByteToMessageDecoder",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "finishProcessing"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "seenEOF"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ", ("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Decoder"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "text" : "InboundOut"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s4Voida",
      "text" : "Void"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/finishProcessing(seenEOF:_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "finishProcessing(seenEOF:_:)",
  "type" : "topic",
  "url" : "\/documentation\/nio\/niosinglestepbytetomessageprocessor\/finishprocessing(seeneof:_:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/NIOSingleStepByteToMessageProcessor/init(_:maximumBufferSize:)": {
  "abstract" : [
    {
      "text" : "Initialize a ",
      "type" : "text"
    },
    {
      "code" : "NIOSingleStepByteToMessageProcessor",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Decoder"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "maximumBufferSize"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    },
    {
      "kind" : "text",
      "text" : "?)"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/init(_:maximumBufferSize:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(_:maximumBufferSize:)",
  "type" : "topic",
  "url" : "\/documentation\/nio\/niosinglestepbytetomessageprocessor\/init(_:maximumbuffersize:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/NIOSingleStepByteToMessageProcessor/process(buffer:_:)": {
  "abstract" : [
    {
      "text" : "Feed data into the ",
      "type" : "text"
    },
    {
      "code" : "NIOSingleStepByteToMessageProcessor",
      "type" : "codeVoice"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Decoder",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "NIOSingleStepByteToMessageDecoder",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "process"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "buffer"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7NIOCore10ByteBufferV",
      "text" : "ByteBuffer"
    },
    {
      "kind" : "text",
      "text" : ", ("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Decoder"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "text" : "InboundOut"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s4Voida",
      "text" : "Void"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/process(buffer:_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "process(buffer:_:)",
  "type" : "topic",
  "url" : "\/documentation\/nio\/niosinglestepbytetomessageprocessor\/process(buffer:_:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/NIO/NIOSingleStepByteToMessageProcessor/unprocessedBytes": {
  "abstract" : [
    {
      "text" : "The number of bytes that are currently not processed by the ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/process(buffer:_:)",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " method. Having unprocessed",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "bytes may result from receiving only partial messages or from receiving multiple messages at once.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Decoder",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "NIOSingleStepByteToMessageDecoder",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "unprocessedBytes"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/unprocessedBytes",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "unprocessedBytes",
  "type" : "topic",
  "url" : "\/documentation\/nio\/niosinglestepbytetomessageprocessor\/unprocessedbytes"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/s8SendableP": {
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s8SendableP",
  "title" : "Swift.Sendable",
  "type" : "unresolvable"
}
}
}