{
  "abstract" : [
    {
      "text" : "Errors that get propogated based on a future’s completion status and the next appended closure’s continuation condition.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:8AsyncKit20EventLoopFutureQueueC13ContinueErrorO",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "enum"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "ContinueError"
      }
    ],
    "modules" : [
      {
        "name" : "AsyncKit"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "ContinueError"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Enumeration",
    "symbolKind" : "enum",
    "title" : "EventLoopFutureQueue.ContinueError"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "enum"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "ContinueError"
            }
          ]
        }
      ],
      "kind" : "declarations"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s23CustomStringConvertibleP",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s5ErrorP",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s8SendableP"
      ],
      "kind" : "relationships",
      "title" : "Conforms To",
      "type" : "conformsTo"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError\/previousError(_:)",
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError\/previousSuccess"
      ],
      "title" : "Enumeration Cases"
    },
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError\/description"
      ],
      "title" : "Instance Properties"
    },
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError\/Error-Implementations"
      ],
      "title" : "Default Implementations"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/asynckit\/eventloopfuturequeue\/continueerror"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/AsyncKit": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "AsyncKit",
  "type" : "topic",
  "url" : "\/documentation\/asynckit"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/AsyncKit/EventLoopFutureQueue": {
  "abstract" : [
    {
      "text" : "Allows you to queue closures that produce an ",
      "type" : "text"
    },
    {
      "code" : "EventLoopFuture",
      "type" : "codeVoice"
    },
    {
      "text" : ", so each future only gets run if the previous ones complete, succeed, or fail.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "EventLoopFutureQueue"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "EventLoopFutureQueue"
    }
  ],
  "role" : "symbol",
  "title" : "EventLoopFutureQueue",
  "type" : "topic",
  "url" : "\/documentation\/asynckit\/eventloopfuturequeue"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/AsyncKit/EventLoopFutureQueue/ContinueError": {
  "abstract" : [
    {
      "text" : "Errors that get propogated based on a future’s completion status and the next appended closure’s continuation condition.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ContinueError"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ContinueError"
    }
  ],
  "role" : "symbol",
  "title" : "EventLoopFutureQueue.ContinueError",
  "type" : "topic",
  "url" : "\/documentation\/asynckit\/eventloopfuturequeue\/continueerror"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/AsyncKit/EventLoopFutureQueue/ContinueError/Error-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError\/Error-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Error Implementations",
  "type" : "topic",
  "url" : "\/documentation\/asynckit\/eventloopfuturequeue\/continueerror\/error-implementations"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/AsyncKit/EventLoopFutureQueue/ContinueError/description": {
  "abstract" : [
    {
      "text" : "A textual representation of the error.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "description"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError\/description",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "description",
  "type" : "topic",
  "url" : "\/documentation\/asynckit\/eventloopfuturequeue\/continueerror\/description"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/AsyncKit/EventLoopFutureQueue/ContinueError/previousError(_:)": {
  "abstract" : [
    {
      "text" : "A previous future failed with an error, which we don’t desire.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "case"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "previousError"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s5ErrorP",
      "text" : "Error"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError\/previousError(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "EventLoopFutureQueue.ContinueError.previousError(_:)",
  "type" : "topic",
  "url" : "\/documentation\/asynckit\/eventloopfuturequeue\/continueerror\/previouserror(_:)"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/documentation/AsyncKit/EventLoopFutureQueue/ContinueError/previousSuccess": {
  "abstract" : [
    {
      "text" : "A previous future succeeded, which we don’t desire.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "case"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "previousSuccess"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError\/previousSuccess",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "EventLoopFutureQueue.ContinueError.previousSuccess",
  "type" : "topic",
  "url" : "\/documentation\/asynckit\/eventloopfuturequeue\/continueerror\/previoussuccess"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/s23CustomStringConvertibleP": {
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s23CustomStringConvertibleP",
  "title" : "Swift.CustomStringConvertible",
  "type" : "unresolvable"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/s5ErrorP": {
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s5ErrorP",
  "title" : "Swift.Error",
  "type" : "unresolvable"
},
"doc://edu.uky.cs.netreconlab.ParseServerSwift/s8SendableP": {
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseServerSwift\/s8SendableP",
  "title" : "Swift.Sendable",
  "type" : "unresolvable"
}
}
}